<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mario Carrion</title><link>http://www.mariocarrion.com/index.xml</link><description>Recent content on Mario Carrion</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Apr 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://www.mariocarrion.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Goals: April 2017</title><link>http://www.mariocarrion.com/2017/04/01/april-2017-goals.html</link><pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/04/01/april-2017-goals.html</guid><description>
&lt;p&gt;My &lt;a href=&#34;http://www.mariocarrion.com/2016/04/01/april-2016-goals.html&#34;&gt;favorite month of the year&lt;/a&gt;: &lt;strong&gt;April&lt;/strong&gt;, is here!&lt;/p&gt;
&lt;p&gt;Having &lt;a href=&#34;http://www.mariocarrion.com/2017/03/01/march-2017-goals.html&#34;&gt;learned from February&lt;/a&gt;, I decided to set clear and concise goals last month. In March I did accomplish what I planned, so no underestimation at all either, what I planned was completed.&lt;/p&gt;
&lt;h2 id=&#34;professionally&#34;&gt;Professionally&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been working more and more on Go-related projects, and I&amp;rsquo;ve been enjoying every single part of it, I need to come up (&lt;strong&gt;for real!&lt;/strong&gt;) with a personal project that really engages me so I can spend time on my own coding using Go. I know I already have &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt; but to tell the truth the project is practically &lt;em&gt;feature complete&lt;/em&gt; so I have &lt;em&gt;nothing else&lt;/em&gt; to add.&lt;/p&gt;
&lt;p&gt;Also, as usual, Ruby was also part of March and on that front I learned about the &lt;a href=&#34;http://www.mariocarrion.com/2017/03/29/til-bypass-rescue.html&#34;&gt;bypass rescue&lt;/a&gt; option in Rspec.&lt;/p&gt;
&lt;h3 id=&#34;personally&#34;&gt;Personally&lt;/h3&gt;
&lt;p&gt;I finished reading all the planned books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/03/03/aws-lambda-in-action.html&#34;&gt;AWS Lambda in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/03/24/go-design-patterns.html&#34;&gt;Go Design Patterns&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/03/27/the-extraordinary-leader.html&#34;&gt;The Extraordinary Leader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and &lt;strong&gt;also&lt;/strong&gt; I already started reading &lt;em&gt;Ego Is The Enemy&lt;/em&gt;, really cool book by the way, I should complete that one this first week of April.&lt;/p&gt;
&lt;h3 id=&#34;what-am-i-planning-for-april-2017&#34;&gt;What am I planning for April 2017?&lt;/h3&gt;
&lt;p&gt;Complete the following books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ego Is The Enemy,&lt;/li&gt;
&lt;li&gt;The ONE Thing, and&lt;/li&gt;
&lt;li&gt;Neo4j in Action.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Related to Neo4j I have to do some R&amp;amp;D for what I believe will be a huge differentiator in our proprietary platform.&lt;/p&gt;</description></item><item><title>Today I learned: Bypass rescue</title><link>http://www.mariocarrion.com/2017/03/29/til-bypass-rescue.html</link><pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/03/29/til-bypass-rescue.html</guid><description>&lt;p&gt;One of my job goals this sprint is to implement a new controller that internally uses our proprietary ACL and it is available &lt;strong&gt;only&lt;/strong&gt; for what we call the &lt;em&gt;Super Admin Role&lt;/em&gt;. Obviously this new code will have to be backed up by its own specs where we will be covering the two possible cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When a valid user has enough permissions (super admin) to access the action, and&lt;/li&gt;
&lt;li&gt;When a valid user does not have enough permissions to access the action.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Depending on what you use for authentication you will do different things to &lt;em&gt;log in&lt;/em&gt; your user, but what is important is the actual section in the spec that tests both cases defined above.&lt;/p&gt;
&lt;p&gt;The easiest one to implement is obviously the case where the user is super admin, assuming we were testing the &lt;code&gt;show&lt;/code&gt; method in the controller it would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;GET show&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;let(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;create(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:super_admin&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;has access&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:show&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;expect(response)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;have_http_status(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:success&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# GET show&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our internal ACL works similar to &lt;a href=&#34;https://github.com/CanCanCommunity/cancancan&#34;&gt;cancancan&lt;/a&gt; where a &lt;a href=&#34;https://github.com/CanCanCommunity/cancancan#3-handle-unauthorized-access&#34;&gt;rescue_from&lt;/a&gt; is added to the main &lt;code&gt;ApplicationController&lt;/code&gt; to render the &lt;em&gt;Access Denied&lt;/em&gt; page. Think of the following snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rescue_from&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;AccessDenied&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;respond_to&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;access_denied&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;js&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;access_denied&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;funny&lt;/em&gt; thing is that if you only replace the user with one with less permissions and practically copy/paste the spec from above your new test &lt;strong&gt;will still pass&lt;/strong&gt; because although the user has no access, the final response still succeeds.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&#34;https://www.relishapp.com/rspec/rspec-rails/v/3-5/docs/controller-specs/bypass-rescue&#34;&gt;bypass_rescue&lt;/a&gt;, now if you rewrite your spec for testing your user permissions like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;GET show&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;before&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bypass_rescue&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;let(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;create(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:guest&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;has NO access&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;expect&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:show&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;raise_error(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;AccessDenied&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# GET show&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;That&lt;/strong&gt; will really confirm your user has no access to the specific action in your controller.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/83QtfwKWdmSEo/giphy.gif&#34; alt=&#34;The more you know&#34; title=&#34;The more you know&#34; /&gt;&lt;/p&gt;</description></item><item><title>Finished Reading: The Extraordinary Leader</title><link>http://www.mariocarrion.com/2017/03/27/the-extraordinary-leader.html</link><pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/03/27/the-extraordinary-leader.html</guid><description>&lt;p&gt;Compared to the &lt;a href=&#34;http://www.mariocarrion.com/2017/03/24/go-design-patterns.html&#34;&gt;previous book&lt;/a&gt;, &lt;a href=&#34;https://smile.amazon.com/dp/B018T5PF84&#34;&gt;The Extraordinary Leader&lt;/a&gt; is a extremely short one, I think it took me less than two hours to complete, not that being short is a bad thing but it does feel kind of weird to complete a book this quick.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Extraordinary Leader&lt;/em&gt; is a book written by &lt;em&gt;Serena Richards&lt;/em&gt; published in 2015. This book marks the beginning of a series of &lt;em&gt;non-technical&lt;/em&gt; books I will be reading this year, mostly focusing on things I want to improve to become a better Project Manager and Technical Leader. &lt;em&gt;The Extraordinary Leader&lt;/em&gt; covers similar subjects included in books I read previously like &lt;a href=&#34;http://www.mariocarrion.com/2016/12/08/elastic-leadership.html&#34;&gt;Elastic Leadership&lt;/a&gt; and &lt;a href=&#34;http://smile.amazon.com/gp/product/B00RTYMOQS&#34;&gt;Project Management for the Unofficial Project Manager&lt;/a&gt;, however it does add a tiny thing that got stuck in my head: &lt;strong&gt;self control&lt;/strong&gt; and the importance of having it to become a great leader.&lt;/p&gt;
&lt;p&gt;In the end &lt;em&gt;The Extraordinary Leader&lt;/em&gt; is a good and short reading that complements the similar books, I do believe a bit more of content would have been nice maybe a few real-life examples.&lt;/p&gt;</description></item><item><title>Finished Reading: Go Design Patterns</title><link>http://www.mariocarrion.com/2017/03/24/go-design-patterns.html</link><pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/03/24/go-design-patterns.html</guid><description>&lt;p&gt;Back in April 2007 I bought &lt;a href=&#34;https://smile.amazon.com/gp/product/0201633612/&#34;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;, to tell the truth this was the first time I was introduced to such a fascinating subject: &lt;em&gt;Design Patterns&lt;/em&gt;. Obviously I did not get everything the first time, so I also bought &lt;a href=&#34;https://smile.amazon.com/gp/product/0596007124&#34;&gt;Head First Design Patterns: A Brain-Friendly Guide&lt;/a&gt; in September the same year.&lt;/p&gt;
&lt;p&gt;Fast forward 10 years later and I finish reading &lt;a href=&#34;https://www.packtpub.com/application-development/go-design-patterns&#34;&gt;Go Design Patterns&lt;/a&gt; a book relatively new, just published last month in February 2017! Written by &lt;em&gt;Mario Castro Contreras&lt;/em&gt; and published by Packt.&lt;/p&gt;
&lt;p&gt;I was interested in this book since I saw the &lt;a href=&#34;https://www.packtpub.com/books/info/packt/early-access&#34;&gt;alpha&lt;/a&gt; in December last year, mostly because I know with Go patterns change to what you usually get in Object Oriented programming languages, I was curious to see what were the differences between the popular (and not that popular) patterns in Go and your average language supporting things Go does not.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Go Design Patterns&lt;/em&gt; is a long book, it took me to complete significantly longer than I expected, about two weeks &lt;em&gt;conmute-time&lt;/em&gt;, so about 60 minutes a day give or take. I think I&amp;rsquo;ll be getting the physical version of &lt;em&gt;Go Design Patterns&lt;/em&gt;, it should be a good quick reference for the future because it does not seem like Go will be changing too much any time soon so this book will still be relevant in the following years.&lt;/p&gt;
&lt;p&gt;Personally I enjoyed the chapters covering &lt;em&gt;io.Writer&lt;/em&gt;, &lt;em&gt;io.Reader&lt;/em&gt; and how you can use pipes for interacting with them, as well as the patterns using concurrency, however there are few cases where you can clearly see the code does not compile so fair warning if you&amp;rsquo;re trying to compile what you read.&lt;/p&gt;
&lt;p&gt;In the end I&amp;rsquo;m really satisfied with my purchase, and I know some Go developers have a love/hate relationship with Design Patterns, not me I like patterns in Go, I only do not force them.&lt;/p&gt;</description></item><item><title>Finished Reading: AWS Lambda in Action</title><link>http://www.mariocarrion.com/2017/03/03/aws-lambda-in-action.html</link><pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/03/03/aws-lambda-in-action.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just finished reading &amp;quot;AWS Lambda in Action&amp;quot; nice book! I hope next edition includes more about testing. &lt;a href=&#34;https://t.co/x8WR5ts8UA&#34;&gt;pic.twitter.com/x8WR5ts8UA&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/837819303353266177&#34;&gt;March 4, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.manning.com/books/aws-lambda-in-action&#34;&gt;AWS Lambda in Action&lt;/a&gt; is a book written by &lt;em&gt;&lt;a href=&#34;https://danilop.net/&#34;&gt;Danilo Poccia&lt;/a&gt;&lt;/em&gt; and published by Manning Publications in November 2016. Similar to other Manning books I own I got this one while it was in &lt;a href=&#34;https://www.manning.com/meap-program&#34;&gt;early access&lt;/a&gt;, I got it because I&amp;rsquo;m super interested in this new &lt;em&gt;buzzword&lt;/em&gt; called &lt;em&gt;Serverless&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;AWS Lambda in Action&lt;/em&gt; perfectly introduces this new Amazon service, almost all chapters include practical examples with code written in both JavaScript and Python. It explains how to deploy, test and design a service using AWS Lambda, how to interact with other AWS Services, like &lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34;&gt;API Gateway&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;Dynamo DB&lt;/a&gt; as well as external services such as &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;, as well as how to log and monitor your Lambda functions.&lt;/p&gt;
&lt;p&gt;The meaty part in &lt;em&gt;AWS Lambda in Action&lt;/em&gt; is the last chapters where everything intersects and you are able to build a complete Lambda-based API, the only topic I feel needed a bit more of content is &lt;em&gt;Testing&lt;/em&gt;; I know it is hard to have a dependency on a web-based service like Lambda and run your tests locally without an internet connection but I guess a few examples maybe using mocks or something provided by Amazon would have helped, obviously not the author&amp;rsquo;s fault if the tools do not exist at this time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;AWS Lambda in Action&lt;/em&gt; did not disappoint.&lt;/p&gt;</description></item><item><title>Goals: March 2017</title><link>http://www.mariocarrion.com/2017/03/01/march-2017-goals.html</link><pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/03/01/march-2017-goals.html</guid><description>
&lt;p&gt;February, the shortest month of the year, is gone, also what a crazy day was yesterday right? Specially for Amazon.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Current AWS status: &lt;a href=&#34;https://t.co/BvKwbou5vi&#34;&gt;pic.twitter.com/BvKwbou5vi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/836636935661764609&#34;&gt;February 28, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;How was February 2017? I believe I failed what I tried to attempt, yes I was able to accomplish some of my personal goals but I did not complete all of them. I really underestimated February, I wanted to do too much and I failed. There&amp;rsquo;s no shame in failing, there&amp;rsquo;s a shame in not acknowledging your failures.&lt;/p&gt;
&lt;p&gt;The key question here is: &lt;em&gt;what am I planning to change so I can succeed this time, this March 2017?&lt;/em&gt; Difficult question but I have some ideas.&lt;/p&gt;
&lt;h3 id=&#34;professionally&#34;&gt;Professionally&lt;/h3&gt;
&lt;p&gt;I was able to write &lt;em&gt;yet another&lt;/em&gt; proprietary Ruby Gem, basically an API for interacting with a Web Service, the cool thing about this new gem is not the actual implementation but the testing-side of it: the idea of sharing the &lt;a href=&#34;http://www.mariocarrion.com/2017/02/06/sharing-vcr-cassetts-in-gems.html&#34;&gt;VCR Cassettes&lt;/a&gt; for properly testing code using that said gem from a different project.&lt;/p&gt;
&lt;p&gt;Besides that Ruby project I had the opportunity to write some client-side JavaScript, using a combination of jQuery and KnockoutJS. JavaScript is not something I see myself doing everyday but still, from time to time, it helps a bit the change of scenery. I even blogged about the &lt;a href=&#34;http://www.mariocarrion.com/2017/02/09/knockoutjs-jquery-custom-bindings.html&#34;&gt;KnockoutJS bindings&lt;/a&gt; I learned while implementing this new change.&lt;/p&gt;
&lt;h3 id=&#34;personally&#34;&gt;Personally&lt;/h3&gt;
&lt;p&gt;I completed half of the books I planned to read, &lt;em&gt;2 of 4&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/02/16/building-the-web-of-things.html&#34;&gt;Building the Web of Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/02/20/go-programming-blueprints-second-edition.html&#34;&gt;Go Programming Blueprints: Second Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m currently reading &lt;em&gt;AWS Lambda in Action&lt;/em&gt; and I intentionally postponed reading &lt;em&gt;Go Design Patterns&lt;/em&gt; because there was no &lt;em&gt;mobi&lt;/em&gt; version available until recently, but finishing those in March is something that will happen.&lt;/p&gt;
&lt;p&gt;For me the highlight of February was the change I planned to make to &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt;, also added more tests and increased the code coverage; all I need now is to update the CI and get some feedback.&lt;/p&gt;
&lt;h3 id=&#34;what-am-i-planning-for-march-2017&#34;&gt;What am I planning for March 2017?&lt;/h3&gt;
&lt;p&gt;Obviously finish reading both books I didn&amp;rsquo;t complete in February: &lt;em&gt;AWS Lambda in Action&lt;/em&gt; and &lt;em&gt;Go Design Patterns&lt;/em&gt;; after those are completed I will start focusing more on non-technical books, specifically I&amp;rsquo;m planning, to at least, read &lt;em&gt;The Extraordinary Leader&lt;/em&gt; and if I still have some March left I will continue with &lt;em&gt;Ego Is the Enemy&lt;/em&gt; and &lt;em&gt;The ONE Thing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Also I must think of pet project, maybe another UML-like project like &lt;a href=&#34;https://sourceforge.net/projects/monouml/&#34;&gt;MonoUML&lt;/a&gt;? I don&amp;rsquo;t know.&lt;/p&gt;</description></item><item><title>Finished Reading: Go Programming Blueprints: Second Edition</title><link>http://www.mariocarrion.com/2017/02/20/go-programming-blueprints-second-edition.html</link><pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/02/20/go-programming-blueprints-second-edition.html</guid><description>&lt;p&gt;I must confess I did not read &lt;a href=&#34;https://www.packtpub.com/application-development/go-programming-blueprints-second-edition&#34;&gt;Go Programming Blueprints: Second Edition&lt;/a&gt; from top to bottom like all the previous books I&amp;rsquo;ve read so far, the reason being I read the &lt;a href=&#34;http://www.mariocarrion.com/2016/12/16/go-programming-blueprints.html&#34;&gt;first edition last year&lt;/a&gt; and I know for sure editions do not change &lt;strong&gt;a lot&lt;/strong&gt; from one to another.&lt;/p&gt;
&lt;p&gt;However, although I knew this was not going to change a lot I was still interested about it, because Mat Ryer, the author of this book, gave a talk at &lt;a href=&#34;http://www.mariocarrion.com/2016/12/16/go-programming-blueprints.html&#34;&gt;GothamGo 2016&lt;/a&gt;, and he mentioned the new chapters included gRPC as well as some covering microservices and Go, so getting this new edition during the 2016 Packt sale was a no-brainer for me.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;$5 Every Book Every Video? 🤔 For now, I&amp;#39;ll take 3 for next year &lt;a href=&#34;https://twitter.com/hashtag/Packt?src=hash&#34;&gt;#Packt&lt;/a&gt; &lt;a href=&#34;https://t.co/eUdelCbkV0&#34;&gt;pic.twitter.com/eUdelCbkV0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/809795487725453312&#34;&gt;December 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;That being said how good (or bad?) are the new chapters?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been toying around with gRPC for a while, nothing in production yet but what Mat covers is what I had to learn the hard way, so if you&amp;rsquo;re starting with gRPC having everything in one place is really useful and saves you some time. Mat uses &lt;a href=&#34;https://github.com/go-kit/kit&#34;&gt;go-kit&lt;/a&gt; as the way to explain microservices + grpc + go, so that&amp;rsquo;s an interesting new thing to learn.&lt;/p&gt;
&lt;p&gt;He also does a great job covering &lt;a href=&#34;http://www.mariocarrion.com/2016/10/31/small-go-docker-image.html&#34;&gt;Docker and Go&lt;/a&gt;, and just like the gRPC content, it saves you a lot of time if this is your first attempt trying to build your own Go-based Docker images.&lt;/p&gt;
&lt;p&gt;Finally, it is hard to tell what changed from the first edition to the second one, however if you&amp;rsquo;re interested in seeing what changed from the first github tag to the second one, please &lt;a href=&#34;https://github.com/matryer/goblueprints/compare/cb2078d9aa6b5b7cc51e80912be82cbba4d2f9a1...b4de110c767ba438fadf376534701a2595832bc5&#34;&gt;see the compare&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Finished Reading: Building the Web of Things</title><link>http://www.mariocarrion.com/2017/02/16/building-the-web-of-things.html</link><pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/02/16/building-the-web-of-things.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Finished reading: &amp;quot;Building the Web of Things&amp;quot; &lt;a href=&#34;https://t.co/8skQ8Gv9Ik&#34;&gt;pic.twitter.com/8skQ8Gv9Ik&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/832357494433443840&#34;&gt;February 16, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.manning.com/books/building-the-web-of-things&#34;&gt;Building the Web of Things&lt;/a&gt; is a book written by &lt;em&gt;Dominique D. Guinard&lt;/em&gt; and &lt;em&gt;Vlad M. Trifa&lt;/em&gt; and published by Manning Publications in June 2016. I got this one during a sale while it was still in &lt;a href=&#34;https://www.manning.com/meap-program&#34;&gt;early access&lt;/a&gt;, I decided to wait a bit until the final version before starting reading.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building the Web of Things&lt;/strong&gt; is the first book completed &lt;a href=&#34;http://www.mariocarrion.com/2017/02/01/february-2017-goals.html&#34;&gt;this month&lt;/a&gt; and to tell the truth, although it is a really easy read, it took me way longer to finish than expected. I did not want to rush it because this is, practically, my introduction to &lt;a href=&#34;https://en.wikipedia.org/wiki/Internet_of_things&#34;&gt;Internet of Things&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Being my first &lt;em&gt;IoT&lt;/em&gt; book everything was new to me, however I was able to recognize a few hardware brands and software but in the end this was new territory. So did I like it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I did&lt;/strong&gt;, I liked it a lot. I consider it a great introduction for people with zero experience, like me, to &lt;em&gt;Internet of Things&lt;/em&gt;. Starting from the first chapter the authors introduce you to what is &lt;em&gt;Internet of Things&lt;/em&gt;, they describe some real world examples and explain the current state of the art. I think te coolest thing about the book is the &lt;em&gt;hands-on&lt;/em&gt; approach, they include snippets of code (&lt;a href=&#34;https://github.com/webofthings&#34;&gt;that is downloadable&lt;/a&gt;) to explain how to connect, interact and build your own &lt;strong&gt;Thing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What I believe is the selling point of &lt;strong&gt;Building the Web of Things&lt;/strong&gt; is the full explanation of the &lt;a href=&#34;http://webofthings.org/2011/12/01/phd-web-of-things-app-archi/&#34;&gt;architecture proposed by Dominique Guinard&lt;/a&gt;, it covers and explains all layers with code examples while introducing new proposed standards, software, protocols and cool stuff I never knew of before.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Building the Web of Things&lt;/strong&gt; is definitely for anyone interestest in Internet of Things.&lt;/p&gt;</description></item><item><title>KnockoutJS/Jquery Tip: Custom Bindings</title><link>http://www.mariocarrion.com/2017/02/09/knockoutjs-jquery-custom-bindings.html</link><pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/02/09/knockoutjs-jquery-custom-bindings.html</guid><description>&lt;p&gt;I faced the following problem today: &lt;em&gt;How can I initialize jQuery components after being loaded by KnockoutJS?&lt;/em&gt; Specifically I was trying to initialize a &lt;a href=&#34;https://select2.github.io/&#34;&gt;select2 component&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first &lt;em&gt;naive&lt;/em&gt; solution was to try using something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(document).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ready&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;select.select2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;select2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That &lt;strong&gt;did not work&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After a quick googling I found this &lt;a href=&#34;http://stackoverflow.com/questions/28955862/how-to-use-jquery-in-a-knockout-js-template&#34;&gt;Stackoverflow question&lt;/a&gt;, &lt;em&gt;How to use jQuery in a Knockout.js Template?&lt;/em&gt;; sadly for whatever reason none of the current answers are marked as a solution although is clear the one with the most upvotes answers it correctly: you have to use &lt;a href=&#34;http://knockoutjs.com/documentation/custom-bindings.html&#34;&gt;custom bindings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I created &lt;a href=&#34;https://jsfiddle.net/MarioCarrion/aekakyhm/&#34;&gt;a jsFiddle&lt;/a&gt; demonstrating this solution, really cool stuff:&lt;/p&gt;
&lt;script async src=&#34;//jsfiddle.net/MarioCarrion/aekakyhm/embed/js,html/dark/&#34;&gt;&lt;/script&gt;</description></item><item><title>Ruby Tip: Sharing VCR cassettes in gems</title><link>http://www.mariocarrion.com/2017/02/06/sharing-vcr-cassetts-in-gems.html</link><pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/02/06/sharing-vcr-cassetts-in-gems.html</guid><description>
&lt;p&gt;Last year I posted a tip for &lt;a href=&#34;http://www.mariocarrion.com/2016/03/15/mocking-apis.html&#34;&gt;Mocking Web APIs&lt;/a&gt;, this post is slightly similar: &lt;strong&gt;using cassettes coming from a gem you depend on and at the same time use your own cassettes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Think of the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You depend on a Web API (implemented in a gem called &lt;code&gt;fancy-web-api&lt;/code&gt;), this gem uses internally VCR for testing, nd you use the responses from that API to build concrete objects that only apply to your implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can you reuse those cassettes defined in &lt;code&gt;fancy-web-api&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s think of the perfect world scenario: we control both &lt;code&gt;fancy-web-api&lt;/code&gt; and a new application that uses this gem. This is, of course, s the easiest way to explain this solution, however if that&amp;rsquo;s not your case then contribute to the gem you depend on the following solution.&lt;/p&gt;
&lt;h3 id=&#34;exposing-the-cassettes-from-fancy-web-api&#34;&gt;Exposing the cassettes from fancy-web-api&lt;/h3&gt;
&lt;p&gt;The key to reuse the cassettes, or actually any other thing being used for testing (like factories or fixtures), is to expose them so then can be loaded from &lt;em&gt;the outside&lt;/em&gt;. In the case of cassettes you would a file included in your &lt;code&gt;fancy-web-api&lt;/code&gt; something similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Takeaways&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# * This file lives in *your gem* in &amp;quot;web_api/vcr_testing.rb&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# * VCR cassettes are defined in &amp;quot;../../../spec/cassettes&amp;quot; relative to this file&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FancyWebAPI&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;VCRTesting&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CASSETTES_PATH&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expand_path(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;../../..&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__FILE__)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;freeze&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;configure!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(config)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure_rspec_metadata!&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cassette_library_dir&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;ROOT_PATH&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;spec&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cassettes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hook_into&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:webmock&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;lt;&amp;lt; self&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# class&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, in both your &lt;code&gt;fancy-web-api&lt;/code&gt; and your new application, you are requiring your VCR cassettes like this in your &lt;code&gt;spec_helper.rb&lt;/code&gt; (or similar):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fancy_web_api/vcr_testing&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FancyWebAPI&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;VCRTesting&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure!(config)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;specs-usage&#34;&gt;Specs usage&lt;/h3&gt;
&lt;p&gt;After calling &lt;code&gt;FancyWebAPI::VCRTesting.configure!&lt;/code&gt; you should be able to use the cassettes like you would using the &lt;em&gt;normal&lt;/em&gt; VCR syntax, so assuming the &lt;code&gt;fancy-web-api&lt;/code&gt; defined a cassette called: &lt;code&gt;https_create&lt;/code&gt;, this will work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ClassUsingHTTPSCreate&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:model&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;when request is valid&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;vcr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;cassette_name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https_create&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Stuff happens here...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-your-own-cassettes-while-using-other-cassettes&#34;&gt;Using your own cassettes while using other cassettes&lt;/h3&gt;
&lt;p&gt;Now, the tricky part comes when you&amp;rsquo;re planning to use &lt;strong&gt;both&lt;/strong&gt; your own cassettes and the ones defined in &lt;code&gt;fancy-web-api&lt;/code&gt;. The answer is simple, &lt;em&gt;juggle&lt;/em&gt; &lt;code&gt;cassette_library_dir=&lt;/code&gt;. What&amp;rsquo;s the most elegant way to do so?&lt;/p&gt;
&lt;p&gt;I personally would use &lt;code&gt;RSpec.configure&lt;/code&gt; to define what I want to do, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;use_my_vcr&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Configure my VCR accordingly&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;use_fancy_web_api_vcr&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FancyWebAPI&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;VCRTesting&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure!(config)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;before(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:all&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:use_my_vcr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;use_my_vcr&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;before(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:all&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:use_fancy_web_api_vcr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;use_fancy_web_api_vcr&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Goals: February 2017</title><link>http://www.mariocarrion.com/2017/02/01/february-2017-goals.html</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/02/01/february-2017-goals.html</guid><description>
&lt;p&gt;January this year was a &lt;em&gt;good&lt;/em&gt; month, the truth is that coming back to work after taking time off is always difficult. However I still believe January 2017 was productive, both personally and professionally.&lt;/p&gt;
&lt;h3 id=&#34;professionally&#34;&gt;Professionally&lt;/h3&gt;
&lt;p&gt;I was able to spend a significant amount of time Dockerizing some of our Ruby (and Ruby on Rails) applications. My personal goal was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare automated Docker images to be built during CI for our QA to verify, I used &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt; and the &lt;a href=&#34;http://www.mariocarrion.com/2017/01/02/uploading-files-in-gitlab.html&#34;&gt;Gitlab API&lt;/a&gt; to connect everything. &lt;strong&gt;It was a success&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Have a &lt;a href=&#34;http://www.mariocarrion.com/2017/01/09/docker-development-environment.html&#34;&gt;Docker-based development environment&lt;/a&gt;. It sort of worked, but I will not call it a success.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sadly having a Docker-based development environment on Mac is currently a painful experience, specially because of the following two bugs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/for-mac/issues/77&#34;&gt;File access in mounted volumes extremely slow&lt;/a&gt; this is &lt;strong&gt;the&lt;/strong&gt; blocker issue to me, because not having shared volumes means not having a clean way to &lt;em&gt;share&lt;/em&gt; your changes with your container. There are workarounds like &lt;a href=&#34;https://github.com/IFSight/d4m-nfs&#34;&gt;d4m-nfs&lt;/a&gt;, but still it&amp;rsquo;s annoying:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/r6cVihhGge&#34;&gt;https://t.co/r6cVihhGge&lt;/a&gt; &lt;a href=&#34;https://t.co/sPoor7Avfp&#34;&gt;pic.twitter.com/sPoor7Avfp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/817516025990316032&#34;&gt;January 6, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/for-mac/issues/371&#34;&gt;Docker.qcow2 never shrinks - disk space usage leak in docker for mac&lt;/a&gt;, not a real blocker, unless you forget to remove the file from time to time; also it seems to be sort of fixed in the most recent version, so it&amp;rsquo;s getting better.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surprisingly, I tried our generated &lt;em&gt;docker-compose.yml&lt;/em&gt; files on Windows, and it worked even better! Microsoft Windows did not disappoint this time.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Let&amp;#39;s play with Docker on Windows for a bit &lt;a href=&#34;https://t.co/pcsHrIGRjX&#34;&gt;pic.twitter.com/pcsHrIGRjX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/826628455836033024&#34;&gt;February 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Besides that I was able to research a bit about writing shared libraries in Go for loading them in Ruby (with &lt;a href=&#34;https://github.com/ffi/ffi&#34;&gt;FFI&lt;/a&gt;), for some our compute-intensive tasks; R&amp;amp;D worked nicely, I just need to actually write the legit version of this, make sure memory is freed accordingly and profit.&lt;/p&gt;
&lt;h3 id=&#34;personally&#34;&gt;Personally&lt;/h3&gt;
&lt;p&gt;I was able to finish reading four books:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/03/ruby-performance-optimizations.html&#34;&gt;Ruby Performance Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/11/monitoring-docker.html&#34;&gt;Monitoring Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html&#34;&gt;Getting Started with Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html&#34;&gt;Docker Networking Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And I&amp;rsquo;m currently reading my first &lt;em&gt;Internet of things&lt;/em&gt; book called &lt;a href=&#34;https://www.manning.com/books/building-the-web-of-things&#34;&gt;Building the Web of Things&lt;/a&gt;, also I got a haircut:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I got a haircut therefore I need a new gopher &lt;a href=&#34;https://t.co/xgafvqcOP4&#34;&gt;pic.twitter.com/xgafvqcOP4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/826632342097780736&#34;&gt;February 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h3 id=&#34;what-am-i-planning-for-february-2017&#34;&gt;What am I planning for February 2017?&lt;/h3&gt;
&lt;p&gt;Finish reading &lt;em&gt;Building the Web of Things&lt;/em&gt; and at least 3 more books, I&amp;rsquo;m planning to finish the other two books I mentioned in &lt;a href=&#34;http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html&#34;&gt;my previous post&lt;/a&gt;: &lt;em&gt;Go Design Patterns&lt;/em&gt; and &lt;em&gt;Go Programming Blueprints - Second Edition&lt;/em&gt;, as well as my first AWS Lambda book, surprisingly titled: &lt;em&gt;AWS Lambda in Action&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I will be updating &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt; to add a new function to be used in the templates, and blog more often about technical stuff, I have a few drafts already waiting to be published. Good times.&lt;/p&gt;</description></item><item><title>Finished Reading: Docker Networking Cookbook</title><link>http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Docker Networking Cookbook&amp;quot;. Good reference. Long book. &lt;a href=&#34;https://t.co/XA0tmZiTDQ&#34;&gt;pic.twitter.com/XA0tmZiTDQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/826198446512152576&#34;&gt;January 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/networking-and-servers/docker-networking-cookbook&#34;&gt;Docker Networking Cookbok&lt;/a&gt; is a book written by &lt;em&gt;Jon Langemak&lt;/em&gt; and published by Packt Publishing in December 2016. This book is part of the set of five books I bought during the 2016 holiday sale, the others I already finished reading are &lt;a href=&#34;http://www.mariocarrion.com/2017/01/11/monitoring-docker.html&#34;&gt;Monitoring Docker&lt;/a&gt; and &lt;a href=&#34;http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html&#34;&gt;Getting Started with Kubernetes&lt;/a&gt;, and only missing two other Go books.&lt;/p&gt;
&lt;p&gt;Anyway, back to this Docker Networking book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Networking Cookbook&lt;/strong&gt; is by far the most detailed and long Docker book I&amp;rsquo;ve ever read, I did not know what to expect when I first saw it but I&amp;rsquo;m really glad I got it, and it didn&amp;rsquo;t disappoint. It obviously covers Docker networking, from your basic networking to your docker network configuration options and it goes to detail and describe concrete examples. It contains information regarding the already supported Docker network options as well as third party network solutions like &lt;a href=&#34;https://github.com/weaveworks/weave&#34;&gt;Weave Net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Networking Cookbook&lt;/strong&gt; is the first book I regret buying the digital version instead of the printed one, and I&amp;rsquo;m considering getting the printed version after reading it, I feel the real value of this book is having the pages right there in front of you, but there&amp;rsquo;s also the problem of the constant evolution of Docker that could make this book obsolete in months. It&amp;rsquo;s a dilemma.&lt;/p&gt;</description></item><item><title>Finished Reading: Getting started with Kubernetes</title><link>http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html</link><pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Nice introduction to Kubernetes: &amp;quot;Getting Started with Kubernetes&amp;quot;. &lt;a href=&#34;https://t.co/sNAy5Asgpq&#34;&gt;pic.twitter.com/sNAy5Asgpq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/823524330386681856&#34;&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes&#34;&gt;Getting Started with Kubernetes&lt;/a&gt; is a book written by &lt;em&gt;Jonathan Baier&lt;/em&gt; and published by Packt Publishing in December 2015. This is my first &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; book ever, and coincidently I got this one as well for only $5 during the holiday sale, just like I did with &lt;a href=&#34;http://www.mariocarrion.com/2017/01/11/monitoring-docker.html&#34;&gt;Monitoring Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m learning all I can about Kubernetes, as a matter of fact I&amp;rsquo;m also watching the &lt;a href=&#34;https://classroom.udacity.com/courses/ud615&#34;&gt;Scalable Microservices with Kubernetes&lt;/a&gt; course from Udacity, and I&amp;rsquo;m also planning to eventually get both &lt;a href=&#34;https://www.manning.com/books/kubernetes-in-action&#34;&gt;Kubernetes in Action&lt;/a&gt; and &lt;a href=&#34;http://shop.oreilly.com/product/0636920043874.do&#34;&gt;Kubernetes: Up and Running&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I liked this introduction a lot, and honestly it is hard for me to give a bad opinion about this book because I don&amp;rsquo;t have any other books to compare to. The takeaways I get from this book is a lot of new projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/heapster&#34;&gt;Heapster&lt;/a&gt;, &lt;a href=&#34;http://www.fluentd.org/&#34;&gt;fluentd&lt;/a&gt; and &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt; for logging, monitoring and log visualization.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opencontainers.org/&#34;&gt;OCI, Open Container Initiative&lt;/a&gt;, and &lt;a href=&#34;https://www.cncf.io/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; this amazes me a lot, I wasn&amp;rsquo;t aware there were dedicated groups trying to come up with an standard.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tectonic.com/&#34;&gt;Tectonic&lt;/a&gt;, for administration, and &lt;a href=&#34;http://www.stackdriver.com/&#34;&gt;StackDriver&lt;/a&gt; for monitoring.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.twistlock.com/&#34;&gt;Twistlock&lt;/a&gt;,&lt;a href=&#34;https://apprenda.com/kismatic/&#34;&gt;Kismatic&lt;/a&gt; and &lt;a href=&#34;http://deis.io/&#34;&gt;Deis&lt;/a&gt;, all three third party companies for running K8s in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quick read and money well spent.&lt;/p&gt;</description></item><item><title>Finished Reading: Monitoring Docker</title><link>http://www.mariocarrion.com/2017/01/11/monitoring-docker.html</link><pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/11/monitoring-docker.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Finished Reading: &amp;quot;Monitoring Docker&amp;quot;. Short book. &lt;a href=&#34;https://t.co/PChMiA6mqz&#34;&gt;pic.twitter.com/PChMiA6mqz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/819173492381876226&#34;&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/virtualization-and-cloud/monitoring-docker&#34;&gt;Monitoring Docker&lt;/a&gt; is book written by Russ McKendrick and published by Packt Publishing in 2015.&lt;/p&gt;
&lt;p&gt;I got this one during the holiday sale for only $5, good deal if you ask me. &lt;em&gt;Monitoring Docker&lt;/em&gt; is all about tools for monitoring Docker containers (obviously), sadly it is kind of short and for the &lt;em&gt;technology standards&lt;/em&gt;, kind of old already, however, surprisingly, the tools mentioned in the book are still available and nothing has really changed that much.&lt;/p&gt;
&lt;p&gt;Most of the tools mentioned in the book are not really specific to Docker containers, yes you can use them for monitoring containers, but that&amp;rsquo;s not their main goal. &lt;em&gt;Monitoring Docker&lt;/em&gt; is a quick read and shouldn&amp;rsquo;t take you longer than a few hours to complete.&lt;/p&gt;
&lt;p&gt;In the end my key only takeaway is the introduction of &lt;a href=&#34;http://www.sysdig.org/&#34;&gt;Sysdig&lt;/a&gt; and Sysdig Cloud.&lt;/p&gt;</description></item><item><title>Tip: Docker Development Environment</title><link>http://www.mariocarrion.com/2017/01/09/docker-development-environment.html</link><pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/09/docker-development-environment.html</guid><description>
&lt;p&gt;One of my resolutions this year is to use Docker as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_source_of_truth&#34;&gt;single source of truth&lt;/a&gt; for all my development environments. So instead of installing the required software, like databases or development libraries, directly into my path I will be leveraging Docker and Docker Compose to have everything always working locally.&lt;/p&gt;
&lt;p&gt;The main problem I currently face is my development setup. I ditched Linux about 7 years ago and migrated completely to macOS, and since Docker Mac is still a work in progress having a development environment based on Docker is a challenge.&lt;/p&gt;
&lt;p&gt;The biggest issue is shared volumes, &lt;a href=&#34;https://docs.docker.com/docker-for-mac/osxfs/#performance-issues-solutions-and-roadmap&#34;&gt;the performance is not the same&lt;/a&gt; compared to the Linux version. I spent some time researching about how to get the best performance with the current available tools, and after testing several tools I settle with &lt;a href=&#34;https://github.com/IFSight/d4m-nfs&#34;&gt;d4m-nfs&lt;/a&gt; that internally uses NFS for sharing the volumes.&lt;/p&gt;
&lt;p&gt;The keys to remember when using Docker and D4M are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When using D4M for the first time make sure the Shared Volumes are removed from Docker, leave &lt;code&gt;/tmp/&lt;/code&gt; only. See the &lt;a href=&#34;https://github.com/IFSight/d4m-nfs/blob/master/README.md&#34;&gt;README&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;After cloning &lt;strong&gt;d4m-nfs&lt;/strong&gt;, create the file &lt;code&gt;etc/d4m-nfs-mounts.txt&lt;/code&gt;, make sure its contents are something like:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;/Users/&amp;lt;username&amp;gt;:/Users/&amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When sharing volumes make sure the folder exists locally, recall the volume is being shared using NFS, the folder must exist in advance otherwise errors will be thrown. There&amp;rsquo;s an option though, apparently you can use &lt;code&gt;root:wwheel&lt;/code&gt; to &lt;a href=&#34;https://github.com/IFSight/d4m-nfs/issues/25&#34;&gt;automatically make the folders&lt;/a&gt;, I tried it but did not work for me.&lt;/li&gt;
&lt;li&gt;If you experience issues related to &lt;a href=&#34;https://github.com/IFSight/d4m-nfs/issues/6&#34;&gt;Mounts denied&lt;/a&gt;, try to:
&lt;ol&gt;
&lt;li&gt;Quit Docker, start it again and wait a bit.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;d4m-nfs.sh&lt;/code&gt; again.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dockerizing-share-activerecord-models-gem&#34;&gt;Dockerizing share-activerecord-models Gem&lt;/h2&gt;
&lt;p&gt;Part of this exercise for me was to update my &lt;a href=&#34;https://github.com/mariocarrion/share-activerecord-models&#34;&gt;share-activerecord-models&lt;/a&gt; gem, the one I introduced in the post &lt;a href=&#34;http://www.mariocarrion.com/2016/02/26/sharing-models-between-projects.html&#34;&gt;Sharing ActiveRecord models between projects&lt;/a&gt;. The idea is simple, to use &lt;code&gt;docker-compose&lt;/code&gt; for building the gem without installing anything else but &lt;code&gt;docker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider taking a look at the &lt;a href=&#34;https://github.com/MarioCarrion/share-activerecord-models/commit/f56379b9e1f26e41659238808b36f44ff38174bd&#34;&gt;change that introduced the Dockerization&lt;/a&gt;, important bits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New folder &lt;a href=&#34;https://github.com/MarioCarrion/share-activerecord-models/commit/f56379b9e1f26e41659238808b36f44ff38174bd#diff-255bc4c176643aa7b3a8bcc6f88d53aa&#34;&gt;.gems/&lt;/a&gt;, which is shared volume, the idea is to have the gems &lt;em&gt;installed&lt;/em&gt; locally not inside the image, similar to a &lt;a href=&#34;https://rvm.io/gemsets/basics&#34;&gt;gemset&lt;/a&gt;, to speed-up building the image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MarioCarrion/share-activerecord-models/commit/f56379b9e1f26e41659238808b36f44ff38174bd#diff-e31bdf70b15c8f84344c332efe06900d&#34;&gt;Database configuration change&lt;/a&gt;, to use the linked container instead of the hardcoded localhost.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that I can easily interact with the gem by doing something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up
docker-compose run gem bundle exec rails generate migration create_my_table
docker-compose run gem bundle exec rails generate scenic:view my_materialized_table --materialized
docker-compose down
&lt;/code&gt;&lt;/pre&gt;</description></item></channel></rss>