<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mario Carrion</title><link>http://www.mariocarrion.com/index.xml</link><description>Recent content on Mario Carrion</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://www.mariocarrion.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby Tip: Sharing VCR cassettes in gems</title><link>http://www.mariocarrion.com/2017/01/06/sharing-vcr-cassetts-in-gems.html</link><pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/06/sharing-vcr-cassetts-in-gems.html</guid><description>
&lt;p&gt;Last year I posted a tip for &lt;a href=&#34;http://www.mariocarrion.com/2016/03/15/mocking-apis.html&#34;&gt;Mocking Web APIs&lt;/a&gt;, this post is slightly similar: &lt;strong&gt;using cassettes coming from a gem you depend on and at the same time use your own cassettes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Think of the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You depend on a Web API (implemented in a gem called &lt;code&gt;fancy-web-api&lt;/code&gt;), this gem uses internally VCR for testing, nd you use the responses from that API to build concrete objects that only apply to your implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can you reuse those cassettes defined in &lt;code&gt;fancy-web-api&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s think of the perfect world scenario: we control both &lt;code&gt;fancy-web-api&lt;/code&gt; and a new application that uses this gem. This is, of course, s the easiest way to explain this solution, however if that&amp;rsquo;s not your case then contribute to the gem you depend on the following solution.&lt;/p&gt;
&lt;h3 id=&#34;exposing-the-cassettes-from-fancy-web-api&#34;&gt;Exposing the cassettes from fancy-web-api&lt;/h3&gt;
&lt;p&gt;The key to reuse the cassettes, or actually any other thing being used for testing (like factories or fixtures), is to expose them so then can be loaded from &lt;em&gt;the outside&lt;/em&gt;. In the case of cassettes you would a file included in your &lt;code&gt;fancy-web-api&lt;/code&gt; something similar to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Takeaways&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# * This file lives in *your gem* in &amp;quot;web_api/vcr_testing.rb&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# * VCR cassettes are defined in &amp;quot;../../../spec/cassettes&amp;quot; relative to this file&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FancyWebAPI&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;VCRTesting&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CASSETTES_PATH&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expand_path(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;../../..&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;__FILE__)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;freeze&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;configure!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(config)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure_rspec_metadata!&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cassette_library_dir&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;ROOT_PATH&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;spec&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cassettes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hook_into&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:webmock&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;lt;&amp;lt; self&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# class&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, in both your &lt;code&gt;fancy-web-api&lt;/code&gt; and your new application, you are requiring your VCR cassettes like this in your &lt;code&gt;spec_helper.rb&lt;/code&gt; (or similar):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fancy_web_api/vcr_testing&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FancyWebAPI&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;VCRTesting&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure!(config)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;specs-usage&#34;&gt;Specs usage&lt;/h3&gt;
&lt;p&gt;After calling &lt;code&gt;FancyWebAPI::VCRTesting.configure!&lt;/code&gt; you should be able to use the cassettes like you would using the &lt;em&gt;normal&lt;/em&gt; VCR syntax, so assuming the &lt;code&gt;fancy-web-api&lt;/code&gt; defined a cassette called: &lt;code&gt;https_create&lt;/code&gt;, this will work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;describe&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ClassUsingHTTPSCreate&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:model&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;when request is valid&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;vcr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;cassette_name&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https_create&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Stuff happens here...&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;using-your-own-cassettes-while-using-other-cassettes&#34;&gt;Using your own cassettes while using other cassettes&lt;/h3&gt;
&lt;p&gt;Now, the tricky part comes when you&amp;rsquo;re planning to use &lt;strong&gt;both&lt;/strong&gt; your own cassettes and the ones defined in &lt;code&gt;fancy-web-api&lt;/code&gt;. The answer is simple, &lt;em&gt;juggle&lt;/em&gt; &lt;code&gt;cassette_library_dir=&lt;/code&gt;. What&amp;rsquo;s the most elegant way to do so?&lt;/p&gt;
&lt;p&gt;I personally would use &lt;code&gt;RSpec.configure&lt;/code&gt; to define what I want to do, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;use_my_vcr&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# Configure my VCR accordingly&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;use_fancy_web_api_vcr&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;VCR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FancyWebAPI&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;VCRTesting&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure!(config)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;RSpec&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;configure&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;before(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:all&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:use_my_vcr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;use_my_vcr&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;before(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:all&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;:use_fancy_web_api_vcr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;use_fancy_web_api_vcr&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Goals: February 2017</title><link>http://www.mariocarrion.com/2017/01/01/february-2017-goals.html</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/01/february-2017-goals.html</guid><description>
&lt;p&gt;January this year was a &lt;em&gt;good&lt;/em&gt; month, the truth is that coming back to work after taking time off is always difficult. However I still believe January 2017 was productive, both personally and professionally.&lt;/p&gt;
&lt;h3 id=&#34;professionally&#34;&gt;Professionally&lt;/h3&gt;
&lt;p&gt;I was able to spend a significant amount of time Dockerizing some of our Ruby (and Ruby on Rails) applications. My personal goal was to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare automated Docker images to be built during CI for our QA to verify, I used &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt; and the &lt;a href=&#34;http://www.mariocarrion.com/2017/01/02/uploading-files-in-gitlab.html&#34;&gt;Gitlab API&lt;/a&gt; to connect everything. &lt;strong&gt;It was a success&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Have a &lt;a href=&#34;http://www.mariocarrion.com/2017/01/09/docker-development-environment.html&#34;&gt;Docker-based development environment&lt;/a&gt;. It sort of worked, but I will not call it a success.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sadly having a Docker-based development environment on Mac is currently a painful experience, specially because of the following two bugs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/for-mac/issues/77&#34;&gt;File access in mounted volumes extremely slow&lt;/a&gt; this is &lt;strong&gt;the&lt;/strong&gt; blocker issue to me, because not having shared volumes means not having a clean way to &lt;em&gt;share&lt;/em&gt; your changes with your container. There are workarounds like &lt;a href=&#34;https://github.com/IFSight/d4m-nfs&#34;&gt;d4m-nfs&lt;/a&gt;, but still it&amp;rsquo;s annoying:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://t.co/r6cVihhGge&#34;&gt;https://t.co/r6cVihhGge&lt;/a&gt; &lt;a href=&#34;https://t.co/sPoor7Avfp&#34;&gt;pic.twitter.com/sPoor7Avfp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/817516025990316032&#34;&gt;January 6, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker/for-mac/issues/371&#34;&gt;Docker.qcow2 never shrinks - disk space usage leak in docker for mac&lt;/a&gt;, not a real blocker, unless you forget to remove the file from time to time; also it seems to be sort of fixed in the most recent version, so it&amp;rsquo;s getting better.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surprisingly, I tried our generated &lt;em&gt;docker-compose.yml&lt;/em&gt; files on Windows, and it worked even better! Microsoft Windows did not disappoint this time.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Let&amp;#39;s play with Docker on Windows for a bit &lt;a href=&#34;https://t.co/pcsHrIGRjX&#34;&gt;pic.twitter.com/pcsHrIGRjX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/826628455836033024&#34;&gt;February 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Besides that I was able to research a bit about writing shared libraries in Go for loading them in Ruby (with &lt;a href=&#34;https://github.com/ffi/ffi&#34;&gt;FFI&lt;/a&gt;), for some our compute-intensive tasks; R&amp;amp;D worked nicely, I just need to actually write the legit version of this, make sure memory is freed accordingly and profit.&lt;/p&gt;
&lt;h3 id=&#34;personally&#34;&gt;Personally&lt;/h3&gt;
&lt;p&gt;I was able to finish reading four books:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/03/ruby-performance-optimizations.html&#34;&gt;Ruby Performance Optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/11/monitoring-docker.html&#34;&gt;Monitoring Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html&#34;&gt;Getting Started with Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html&#34;&gt;Docker Networking Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And I&amp;rsquo;m currently reading my first &lt;em&gt;Internet of things&lt;/em&gt; book called &lt;a href=&#34;https://www.manning.com/books/building-the-web-of-things&#34;&gt;Building the Web of Things&lt;/a&gt;, also I got a haircut:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I got a haircut therefore I need a new gopher &lt;a href=&#34;https://t.co/xgafvqcOP4&#34;&gt;pic.twitter.com/xgafvqcOP4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/826632342097780736&#34;&gt;February 1, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h3 id=&#34;what-am-i-planning-for-february-2017&#34;&gt;What am I planning for February 2017?&lt;/h3&gt;
&lt;p&gt;Finish reading &lt;em&gt;Building the Web of Things&lt;/em&gt; and at least 3 more books, I&amp;rsquo;m planning to finish the other two books I mentioned in &lt;a href=&#34;http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html&#34;&gt;my previous post&lt;/a&gt;: &lt;em&gt;Go Design Patterns&lt;/em&gt; and &lt;em&gt;Go Programming Blueprints - Second Edition&lt;/em&gt;, as well as my first AWS Lambda book, surprisingly titled: &lt;em&gt;AWS Lambda in Action&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I will be updating &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt; to add a new function to be used in the templates, and blog more often about technical stuff, I have a few drafts already waiting to be published. Good times.&lt;/p&gt;</description></item><item><title>Finished Reading: Docker Networking Cookbook</title><link>http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html</link><pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/30/docker-network-cookbook.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&amp;quot;Docker Networking Cookbook&amp;quot;. Good reference. Long book. &lt;a href=&#34;https://t.co/XA0tmZiTDQ&#34;&gt;pic.twitter.com/XA0tmZiTDQ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/826198446512152576&#34;&gt;January 30, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/networking-and-servers/docker-networking-cookbook&#34;&gt;Docker Networking Cookbok&lt;/a&gt; is a book written by &lt;em&gt;Jon Langemak&lt;/em&gt; and published by Packt Publishing in December 2016. This book is part of the set of five books I bought during the 2016 holiday sale, the others I already finished reading are &lt;a href=&#34;http://www.mariocarrion.com/2017/01/11/monitoring-docker.html&#34;&gt;Monitoring Docker&lt;/a&gt; and &lt;a href=&#34;http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html&#34;&gt;Getting Started with Kubernetes&lt;/a&gt;, and only missing two other Go books.&lt;/p&gt;
&lt;p&gt;Anyway, back to this Docker Networking book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Networking Cookbook&lt;/strong&gt; is by far the most detailed and long Docker book I&amp;rsquo;ve ever read, I did not know what to expect when I first saw it but I&amp;rsquo;m really glad I got it, and it didn&amp;rsquo;t disappoint. It obviously covers Docker networking, from your basic networking to your docker network configuration options and it goes to detail and describe concrete examples. It contains information regarding the already supported Docker network options as well as third party network solutions like &lt;a href=&#34;https://github.com/weaveworks/weave&#34;&gt;Weave Net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Networking Cookbook&lt;/strong&gt; is the first book I regret buying the digital version instead of the printed one, and I&amp;rsquo;m considering getting the printed version after reading it, I feel the real value of this book is having the pages right there in front of you, but there&amp;rsquo;s also the problem of the constant evolution of Docker that could make this book obsolete in months. It&amp;rsquo;s a dilemma.&lt;/p&gt;</description></item><item><title>Finished Reading: Getting started with Kubernetes</title><link>http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html</link><pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/23/getting-started-kubernetes.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Nice introduction to Kubernetes: &amp;quot;Getting Started with Kubernetes&amp;quot;. &lt;a href=&#34;https://t.co/sNAy5Asgpq&#34;&gt;pic.twitter.com/sNAy5Asgpq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/823524330386681856&#34;&gt;January 23, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes&#34;&gt;Getting Started with Kubernetes&lt;/a&gt; is a book written by &lt;em&gt;Jonathan Baier&lt;/em&gt; and published by Packt Publishing in December 2015. This is my first &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; book ever, and coincidently I got this one as well for only $5 during the holiday sale, just like I did with &lt;a href=&#34;http://www.mariocarrion.com/2017/01/11/monitoring-docker.html&#34;&gt;Monitoring Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m learning all I can about Kubernetes, as a matter of fact I&amp;rsquo;m also watching the &lt;a href=&#34;https://classroom.udacity.com/courses/ud615&#34;&gt;Scalable Microservices with Kubernetes&lt;/a&gt; course from Udacity, and I&amp;rsquo;m also planning to eventually get both &lt;a href=&#34;https://www.manning.com/books/kubernetes-in-action&#34;&gt;Kubernetes in Action&lt;/a&gt; and &lt;a href=&#34;http://shop.oreilly.com/product/0636920043874.do&#34;&gt;Kubernetes: Up and Running&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I liked this introduction a lot, and honestly it is hard for me to give a bad opinion about this book because I don&amp;rsquo;t have any other books to compare to. The takeaways I get from this book is a lot of new projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/heapster&#34;&gt;Heapster&lt;/a&gt;, &lt;a href=&#34;http://www.fluentd.org/&#34;&gt;fluentd&lt;/a&gt; and &lt;a href=&#34;http://grafana.org/&#34;&gt;Grafana&lt;/a&gt; for logging, monitoring and log visualization.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.opencontainers.org/&#34;&gt;OCI, Open Container Initiative&lt;/a&gt;, and &lt;a href=&#34;https://www.cncf.io/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; this amazes me a lot, I wasn&amp;rsquo;t aware there were dedicated groups trying to come up with an standard.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tectonic.com/&#34;&gt;Tectonic&lt;/a&gt;, for administration, and &lt;a href=&#34;http://www.stackdriver.com/&#34;&gt;StackDriver&lt;/a&gt; for monitoring.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.twistlock.com/&#34;&gt;Twistlock&lt;/a&gt;,&lt;a href=&#34;https://apprenda.com/kismatic/&#34;&gt;Kismatic&lt;/a&gt; and &lt;a href=&#34;http://deis.io/&#34;&gt;Deis&lt;/a&gt;, all three third party companies for running K8s in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quick read and money well spent.&lt;/p&gt;</description></item><item><title>Finished Reading: Monitoring Docker</title><link>http://www.mariocarrion.com/2017/01/11/monitoring-docker.html</link><pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/11/monitoring-docker.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Finished Reading: &amp;quot;Monitoring Docker&amp;quot;. Short book. &lt;a href=&#34;https://t.co/PChMiA6mqz&#34;&gt;pic.twitter.com/PChMiA6mqz&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/819173492381876226&#34;&gt;January 11, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href=&#34;https://www.packtpub.com/virtualization-and-cloud/monitoring-docker&#34;&gt;Monitoring Docker&lt;/a&gt; is book written by Russ McKendrick and published by Packt Publishing in 2015.&lt;/p&gt;
&lt;p&gt;I got this one during the holiday sale for only $5, good deal if you ask me. &lt;em&gt;Monitoring Docker&lt;/em&gt; is all about tools for monitoring Docker containers (obviously), sadly it is kind of short and for the &lt;em&gt;technology standards&lt;/em&gt;, kind of old already, however, surprisingly, the tools mentioned in the book are still available and nothing has really changed that much.&lt;/p&gt;
&lt;p&gt;Most of the tools mentioned in the book are not really specific to Docker containers, yes you can use them for monitoring containers, but that&amp;rsquo;s not their main goal. &lt;em&gt;Monitoring Docker&lt;/em&gt; is a quick read and shouldn&amp;rsquo;t take you longer than a few hours to complete.&lt;/p&gt;
&lt;p&gt;In the end my key only takeaway is the introduction of &lt;a href=&#34;http://www.sysdig.org/&#34;&gt;Sysdig&lt;/a&gt; and Sysdig Cloud.&lt;/p&gt;</description></item><item><title>Tip: Docker Development Environment</title><link>http://www.mariocarrion.com/2017/01/09/docker-development-environment.html</link><pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/09/docker-development-environment.html</guid><description>
&lt;p&gt;One of my resolutions this year is to use Docker as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_source_of_truth&#34;&gt;single source of truth&lt;/a&gt; for all my development environments. So instead of installing the required software, like databases or development libraries, directly into my path I will be leveraging Docker and Docker Compose to have everything always working locally.&lt;/p&gt;
&lt;p&gt;The main problem I currently face is my development setup. I ditched Linux about 7 years ago and migrated completely to macOS, and since Docker Mac is still a work in progress having a development environment based on Docker is a challenge.&lt;/p&gt;
&lt;p&gt;The biggest issue is shared volumes, &lt;a href=&#34;https://docs.docker.com/docker-for-mac/osxfs/#performance-issues-solutions-and-roadmap&#34;&gt;the performance is not the same&lt;/a&gt; compared to the Linux version. I spent some time researching about how to get the best performance with the current available tools, and after testing several tools I settle with &lt;a href=&#34;https://github.com/IFSight/d4m-nfs&#34;&gt;d4m-nfs&lt;/a&gt; that internally uses NFS for sharing the volumes.&lt;/p&gt;
&lt;p&gt;The keys to remember when using Docker and D4M are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When using D4M for the first time make sure the Shared Volumes are removed from Docker, leave &lt;code&gt;/tmp/&lt;/code&gt; only. See the &lt;a href=&#34;https://github.com/IFSight/d4m-nfs/blob/master/README.md&#34;&gt;README&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;After cloning &lt;strong&gt;d4m-nfs&lt;/strong&gt;, create the file &lt;code&gt;etc/d4m-nfs-mounts.txt&lt;/code&gt;, make sure its contents are something like:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;/Users/&amp;lt;username&amp;gt;:/Users/&amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When sharing volumes make sure the folder exists locally, recall the volume is being shared using NFS, the folder must exist in advance otherwise errors will be thrown. There&amp;rsquo;s an option though, apparently you can use &lt;code&gt;root:wwheel&lt;/code&gt; to &lt;a href=&#34;https://github.com/IFSight/d4m-nfs/issues/25&#34;&gt;automatically make the folders&lt;/a&gt;, I tried it but did not work for me.&lt;/li&gt;
&lt;li&gt;If you experience issues related to &lt;a href=&#34;https://github.com/IFSight/d4m-nfs/issues/6&#34;&gt;Mounts denied&lt;/a&gt;, try to:
&lt;ol&gt;
&lt;li&gt;Quit Docker, start it again and wait a bit.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;d4m-nfs.sh&lt;/code&gt; again.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dockerizing-share-activerecord-models-gem&#34;&gt;Dockerizing share-activerecord-models Gem&lt;/h2&gt;
&lt;p&gt;Part of this exercise for me was to update my &lt;a href=&#34;https://github.com/mariocarrion/share-activerecord-models&#34;&gt;share-activerecord-models&lt;/a&gt; gem, the one I introduced in the post &lt;a href=&#34;http://www.mariocarrion.com/2016/02/26/sharing-models-between-projects.html&#34;&gt;Sharing ActiveRecord models between projects&lt;/a&gt;. The idea is simple, to use &lt;code&gt;docker-compose&lt;/code&gt; for building the gem without installing anything else but &lt;code&gt;docker&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider taking a look at the &lt;a href=&#34;https://github.com/MarioCarrion/share-activerecord-models/commit/f56379b9e1f26e41659238808b36f44ff38174bd&#34;&gt;change that introduced the Dockerization&lt;/a&gt;, important bits are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New folder &lt;a href=&#34;https://github.com/MarioCarrion/share-activerecord-models/commit/f56379b9e1f26e41659238808b36f44ff38174bd#diff-255bc4c176643aa7b3a8bcc6f88d53aa&#34;&gt;.gems/&lt;/a&gt;, which is shared volume, the idea is to have the gems &lt;em&gt;installed&lt;/em&gt; locally not inside the image, similar to a &lt;a href=&#34;https://rvm.io/gemsets/basics&#34;&gt;gemset&lt;/a&gt;, to speed-up building the image.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MarioCarrion/share-activerecord-models/commit/f56379b9e1f26e41659238808b36f44ff38174bd#diff-e31bdf70b15c8f84344c332efe06900d&#34;&gt;Database configuration change&lt;/a&gt;, to use the linked container instead of the hardcoded localhost.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that I can easily interact with the gem by doing something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up
docker-compose run gem bundle exec rails generate migration create_my_table
docker-compose run gem bundle exec rails generate scenic:view my_materialized_table --materialized
docker-compose down
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Finished Reading: Ruby Performance Optimization</title><link>http://www.mariocarrion.com/2017/01/03/ruby-performance-optimizations.html</link><pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/03/ruby-performance-optimizations.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Real cool book: &amp;quot;Ruby Performance Optimizations&amp;quot;, I hope more people read it. &lt;a href=&#34;https://t.co/wvQ7nIjewb&#34;&gt;pic.twitter.com/wvQ7nIjewb&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/816507811068866561&#34;&gt;January 4, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;New year 2017 starts with a &lt;a href=&#34;http://ruby-for-beginners.rubymonstas.org/objects/bangs.html&#34;&gt;bang!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I said &lt;a href=&#34;http://www.mariocarrion.com/2016/12/31/year-in-review.html&#34;&gt;I was not going to spend any more of my time doing Ruby stuff&lt;/a&gt;, but I couldn&amp;rsquo;t pass the opportunity to read this book, I did not know for sure if it was good or bad, not a lot of information out there, but what could go wrong if I read it?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pragprog.com/book/adrpo/ruby-performance-optimization&#34;&gt;Ruby Performance Optimization&lt;/a&gt; was written by &lt;a href=&#34;http://www.alexdymo.com/&#34;&gt;Alexander Dymo&lt;/a&gt; and published by The Pragmatic Bookshelf in 2015, I got it during a sale and I couldn&amp;rsquo;t be any more happier after reading it.&lt;/p&gt;
&lt;p&gt;I enjoyed the book a lot, I&amp;rsquo;m surprised is not more popular, maybe Ruby developers don&amp;rsquo;t care too much performance? Not sure. The key takeaways from this book are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using iterators incorrectly could be a reason certain code is underperforming, too much &lt;em&gt;Rubyisims&lt;/em&gt; chained together may kill the radio star.&lt;/li&gt;
&lt;li&gt;Explicitly indicating the fact you can not, and should not, try to use Ruby for everything. Thing which for whatever reason sometimes I find difficult to understand why some Ruby developers don&amp;rsquo;t get, &lt;em&gt;some&lt;/em&gt; swear by the language and want to use it for everything. Strange.&lt;/li&gt;
&lt;li&gt;The introduction of several profiling tools, a new one I did not know: &lt;a href=&#34;https://kcachegrind.github.io/html/Home.html&#34;&gt;KCachegrind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Several tricks using &lt;a href=&#34;https://github.com/ruby-prof/ruby-prof&#34;&gt;ruby-prof&lt;/a&gt;, a well known Ruby gem.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Confidence_interval&#34;&gt;Confidence interval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Query Tests&lt;/em&gt;, to actually test the generated SQL, and &lt;em&gt;Benchmark Tests&lt;/em&gt; to have proper way to determine if the code degraded (or improved!) after a change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall great book, I really hope all Ruby developers find it sooner than later because it covers a lot of great/fundamental topics and includes clear explanations describing how to properly benchmark code by using all the available tools. Nice.&lt;/p&gt;</description></item><item><title>Tip: Uploading files programmatically in Gitlab</title><link>http://www.mariocarrion.com/2017/01/02/uploading-files-in-gitlab.html</link><pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/02/uploading-files-in-gitlab.html</guid><description>
&lt;p&gt;The last piece in the &lt;strong&gt;Docker Full Development Workflow&lt;/strong&gt; is uploading the file generated by &lt;a href=&#34;https://github.com/MarioCarrion/templenv&#34;&gt;templenv&lt;/a&gt; to the Merge Request that originated it. Let&amp;rsquo;s see how can we use the Gitlab API for doing all of all this.&lt;/p&gt;
&lt;h2 id=&#34;token&#34;&gt;Token&lt;/h2&gt;
&lt;p&gt;First thing required for this is to get the token to be used for all the requests, visiting the &lt;code&gt;https://gitlab.domain/profile/account&lt;/code&gt;, let&amp;rsquo;s assume that this token is &lt;code&gt;ABCDEFG&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;getting-project-id&#34;&gt;Getting project ID&lt;/h2&gt;
&lt;p&gt;Since the file will be uploaded to a project, and the note (comment) will be added to a Merge Request in that said project, we must get the project ID first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;H&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;PRIVATE-TOKEN: ABCDEFG&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;https://gitlab.domain/api/v3/projects/namespace%2Frepo&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;GET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should output a JSON including the &lt;strong&gt;project id&lt;/strong&gt;, this ID will be used for the next API calls. Let&amp;rsquo;s assume, this id is &lt;strong&gt;9999&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;uploading-the-file&#34;&gt;Uploading the file&lt;/h2&gt;
&lt;p&gt;If we wanted to upload a file we will use something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;H&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;PRIVATE-TOKEN: ABCDEFG&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;https://gitlab.domain/api/v3/projects/9999/uploads&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;F&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;file=@docker-compose.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return a JSON including the markdown to be used in the next calls to add a comment to the merge request.&lt;/p&gt;
&lt;h2 id=&#34;getting-the-merge-request-id&#34;&gt;Getting the Merge Request ID&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a Merge Request &lt;strong&gt;1234&lt;/strong&gt;, in this project &lt;strong&gt;9999&lt;/strong&gt;, we will use the API to get the ID first like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;H&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;PRIVATE-TOKEN: ABCDEFG&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;https://gitlab.domain/api/v3/projects/9999/merge_requests?iid=1234&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;GET&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will return a JSON as well, let&amp;rsquo;s assume the ID for this merge request is &lt;strong&gt;4567&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-note-in-merge-request&#34;&gt;Create note in merge request&lt;/h2&gt;
&lt;p&gt;Finally we will need to create the note and add the linked file like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;H&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;PRIVATE-TOKEN: ABCDEFG&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;https://gitlab.domain/api/v3/projects/9999/merge_requests/4567/notes&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;X&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;F&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;body=Link to file [docker-compose.yml](/uploads/9125e38ea55c5415a294af6c463f9af5/docker-compose.yml)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>2017. Year goals</title><link>http://www.mariocarrion.com/2017/01/01/2017-year-plans.html</link><pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2017/01/01/2017-year-plans.html</guid><description>&lt;p&gt;&lt;a href=&#34;http://www.mariocarrion.com/2016/12/31/year-in-review.html&#34;&gt;In 2016&lt;/a&gt; I read 31 books, this 2017 I must go beyond that I won&amp;rsquo;t say a number but I will exceed 31, I will focus more on personal growth kind-of of books.&lt;/p&gt;
&lt;p&gt;In January I will finish reading &lt;strong&gt;Ruby Performance Optimization&lt;/strong&gt;, &lt;strong&gt;Docker Networking Cookbook&lt;/strong&gt; and &lt;strong&gt;AWS Lambda in Action&lt;/strong&gt;, I&amp;rsquo;ll start reading &lt;strong&gt;Introduction to Graph Theory&lt;/strong&gt; but I honestly believe it will be difficult to complete, the font is tiny and the content is &lt;em&gt;huge&lt;/em&gt; and the truth is that I do not want to rush it.&lt;/p&gt;
&lt;p&gt;At work? More &lt;em&gt;Gofication&lt;/em&gt;, and I&amp;rsquo;ll start thinking about the &lt;strong&gt;Panic Citi&lt;/strong&gt; project, Spring training is coming soon and I really want to write something regarding the Mets.&lt;/p&gt;</description></item><item><title>Goodbye 2016: Year in review</title><link>http://www.mariocarrion.com/2016/12/31/year-in-review.html</link><pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/31/year-in-review.html</guid><description>&lt;p&gt;Two years ago &lt;a href=&#34;http://www.mariocarrion.com/2014/12/28/rebooting-this-blog.html&#34;&gt;I wrote&lt;/a&gt; a tiny post about &lt;em&gt;rebooting this blog&lt;/em&gt;. I&amp;rsquo;m happy to say I was able to do that this year 2016, still there&amp;rsquo;s a long way ahead but progress has been made.&lt;/p&gt;
&lt;p&gt;To tell the truth I did not have plans to set monthly reading goals, but having read 20 books in 2015 definitely inspired me to continue with the good habit of reading and learning on my own, just like I used to when I was in high school and college, trying to become a better person and engineer at the same time, all of this &lt;strong&gt;because I want to&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Professionally I need to keep motivating myself, find the time to read, learn and code on my own limited free time, because there&amp;rsquo;s no other way to get better, and I must say I&amp;rsquo;ve been slacking off and getting &lt;em&gt;technologically stagnated&lt;/em&gt; for the last five years, all of that had to change at one point in time. &lt;a href=&#34;http://www.mariocarrion.com/2016/01/26/a-look-back-at-previous-lustrum.html&#34;&gt;Year 2016 was the trigger in this change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I know 2016 has been a sad year for a lot of people, a lot of crazy things happened in the world, a lot of musicians and actors that I used to listen to and watch when I was younger are gone, considering how the year is ending I know for sure 2017 will be more difficult for everybody, but I won&amp;rsquo;t give up, I really want to become a better person, a better professional and a better family man. I know for sure I can&amp;rsquo;t control what happens around the country and the world, but I can control the most important variable: me, and I will do that.&lt;/p&gt;
&lt;p&gt;From the professional point of view, I will be &lt;em&gt;going all in&lt;/em&gt; with Go, a programming language suggested by one our engineers about 2 years ago. Crazy how much time I wasted before making this &lt;em&gt;official&lt;/em&gt;. I believe Go is a programming language capable of shifting development, its performance and cleanness are what I like the most about it. I will still be using Ruby because there&amp;rsquo;s a ton of legacy code still written in that language, but every single new service that does not heavily depend on any Ruby interfaces will be written in Go. There&amp;rsquo;s no way back, I like Go, its community and I believe it is the best decision for my career. &lt;a href=&#34;http://www.mariocarrion.com/2010/01/21/the-ruby-programming-language.html&#34;&gt;Ruby&lt;/a&gt; and Ruby on Rails were nice, but it&amp;rsquo;s time to move on.&lt;/p&gt;
&lt;p&gt;From the personal point of view, reading will keep me &lt;em&gt;up to date&lt;/em&gt;, my books wishlists include both technical books as well as personal growth/soft skill books. I&amp;rsquo;ll start to read those together with the technical ones as well.&lt;/p&gt;
&lt;p&gt;In the end 2016 did work for me, I was able to accomplish what I wanted:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read more books than the year before, in 2016 I finished reading 31 books, 11 more than in 2015.&lt;/li&gt;
&lt;li&gt;Have multiple Go programs running in production with success.&lt;/li&gt;
&lt;li&gt;Normalize all projects back at work, including code styling, building processes and specially increase code coverage to at least 90% each.&lt;/li&gt;
&lt;li&gt;Use Docker more often, personally and professionally.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In 2017 I will rise my expectations higher otherwise what&amp;rsquo;s the point?&lt;/p&gt;</description></item><item><title>Git Workflow: Rebase and Merge</title><link>http://www.mariocarrion.com/2016/12/28/git-rebase-merge.html</link><pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/28/git-rebase-merge.html</guid><description>
&lt;p&gt;Previous Tip: &lt;a href=&#34;http://www.mariocarrion.com/2016/08/30/git-commit-message.html&#34;&gt;Commit Message Conventions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Continuing the Git series, in this post I&amp;rsquo;ll cover why rebasing over merging can make a huge difference, and why is our preferred way.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-merge-and-rebase&#34;&gt;What is the difference between merge and rebase?&lt;/h3&gt;
&lt;p&gt;Being extremely succinct, &lt;a href=&#34;https://git-scm.com/docs/git-merge&#34;&gt;Merge&lt;/a&gt; and &lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34;&gt;Rebase&lt;/a&gt; are two different ways of adding code from one branch to another, the main difference is how the history will be written after the code is integrated in the target branch as well as how much control you have when joining two branches. Please consider reading the &lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing/&#34;&gt;Atlassian tutorial&lt;/a&gt; it explains both methods with clear graphics.&lt;/p&gt;
&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; is used when working on feature branches to always be &lt;em&gt;on top&lt;/em&gt; of the all changes that the original branch currently has and any future changes to be pushed by other team members.&lt;/p&gt;
&lt;p&gt;The following will be a common workflow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TKT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;things&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# ... stuff happens and we use the well knonwn &amp;quot;commit&amp;quot; &amp;quot;push&amp;quot; &lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rebase&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# we always keep our branch up to date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then after our feature branch is reviewed and ready to be joined into master, we do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rebase&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TKT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;things&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In cases where we are &lt;em&gt;deploying&lt;/em&gt; something into a release branch, we use &lt;code&gt;merge&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;production&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;merge&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That way we can a commit message to indicate some possible changes that indicate what happened during this release.&lt;/p&gt;
&lt;p&gt;The idea of using &lt;code&gt;rebase&lt;/code&gt; instead of &lt;code&gt;merge&lt;/code&gt; when joining branches allows us to have a clean an concise Git history, and to avoid messes like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/mariocarrion/31876330261/in/dateposted-public/&#34;&gt;&lt;img src=&#34;https://c1.staticflickr.com/1/256/31876330261_8e356a1149_o.png&#34; alt=&#34;git rebase VS git merge&#34; title=&#34;git merge VS git rebase&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Upgrading Laptop&#39;s hard drive</title><link>http://www.mariocarrion.com/2016/12/20/upgrading-latops-hard-drive.html</link><pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/20/upgrading-latops-hard-drive.html</guid><description>&lt;p&gt;Back in 2010 I bought my first ever &lt;a href=&#34;https://support.apple.com/kb/sp582?locale=en_US&#34;&gt;Macbook Pro&lt;/a&gt;, a shiny 2.4 GHz Intel Core i5 with 4GB of RAM. In 2011 I upgraded the memory from 4GB to 8GB with a pair of &lt;a href=&#34;https://smile.amazon.com/gp/product/B001PS9UKW/&#34;&gt;Kingston 4GB Modules&lt;/a&gt;, in 2014 I replaced the original battery with an &lt;a href=&#34;https://smile.amazon.com/gp/product/B00D77FL7K/&#34;&gt;Anker one&lt;/a&gt;, not the best one but whatever; now two years later, 2016, I decided to replace the factory Hard Drive with an SSD, the original Hitachi 320GB with a &lt;a href=&#34;https://smile.amazon.com/gp/product/B01IAGSD5O/&#34;&gt;Crucial 275GB SSD&lt;/a&gt; and &lt;strong&gt;what a great difference!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I believe the huge difference comes because well, the original hard drive is 6 years old already and this new one is an SSD, not a fair comparison but I like the biased results. Everything has improved: booting time, wake up time, even the time it took me to open new iTerm2 tabs, I&amp;rsquo;m so happy. The truth is that before considering replacing the HDD I was thinking about getting a brand new laptop, a Windows Laptop to be precise, I was thinking about a Windows one because multiple developers are really enjoying the Linux integration, so I wanted to give it a try.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If I write a blog post on my windows/bash dev setup how deep do you want the details?&lt;/p&gt;&amp;mdash; Son of Immigrants (@bketelsen) &lt;a href=&#34;https://twitter.com/bketelsen/status/801449292716212224&#34;&gt;November 23, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;But you know I was hesitant to buy a new laptop, investing $1,300+ it&amp;rsquo;s too much right now, so for $84 I get what I need at this precise moment, old laptop feels like a new one. Hopefully I can replace my laptop&amp;rsquo;s battery as well because it is time as well.&lt;/p&gt;
&lt;p&gt;Replacing the hard drive was a breeze, iFixit has a &lt;a href=&#34;https://www.ifixit.com/Guide/MacBook+Pro+15-Inch+Unibody+Mid+2010+Hard+Drive+Replacement/3030&#34;&gt;phenomenal guide&lt;/a&gt; that details every step, you just need to have the right tools otherwise you won&amp;rsquo;t go too far (Torx and Tri-win screwdrivers are a pain to find!)&lt;/p&gt;
&lt;p&gt;Installing and upgrading macOS was the thing that took me the most time, about 2-3 hours to have everything installed and upgraded. I tried installing Sierra directly by using the &lt;a href=&#34;https://support.apple.com/en-us/HT201314&#34;&gt;Internet Recovery Option&lt;/a&gt;, but that did not work, I was getting a timeout error because, apparently, my WiFi was not working correctly.&lt;/p&gt;
&lt;p&gt;In the end I installed it from the original DVD (macOS 10.6.5) and slowly upgraded every minor version until 10.7, after that I upgraded to Sierra. Slow process but it worked with zero issues.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Internet Recovery did not work😩 &lt;a href=&#34;https://twitter.com/hashtag/CurrentStatus?src=hash&#34;&gt;#CurrentStatus&lt;/a&gt; &lt;a href=&#34;https://t.co/Z5J1UaE0ZX&#34;&gt;pic.twitter.com/Z5J1UaE0ZX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/811062471997931520&#34;&gt;December 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;After slowly upgrading to 10.6.8, it&amp;#39;s time to jump to 10.7. 2011 here I come! &lt;a href=&#34;https://t.co/OV2IBf4HsW&#34;&gt;pic.twitter.com/OV2IBf4HsW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/811084576617594880&#34;&gt;December 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I also had to update my &lt;a href=&#34;https://github.com/MarioCarrion/mc-profile/blob/master/BOOTSTRAP.md&#34;&gt;BOOSTRAP file&lt;/a&gt; to include the most recent changes I had to do to have everything running correctly with this new upgrade. I want to start using Docker for everything (except git and vim) so installing things locally (like &lt;em&gt;rvm&lt;/em&gt;, &lt;em&gt;databases&lt;/em&gt; or whatever required libraries) are no no for me now, no need to clutter my laptop, also containers are life.&lt;/p&gt;</description></item><item><title>Finished Reading: Go Programming Blueprints</title><link>http://www.mariocarrion.com/2016/12/16/go-programming-blueprints.html</link><pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/16/go-programming-blueprints.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;31st of the year! &amp;quot;Go Programming Blueprints&amp;quot;, cover is fixed as well 😌 &lt;a href=&#34;https://t.co/bbyzNBQPGt&#34;&gt;pic.twitter.com/bbyzNBQPGt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/809867795487932417&#34;&gt;December 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I have accomplished what I promised in &lt;a href=&#34;http://www.mariocarrion.com/2016/10/01/october-goals.html&#34;&gt;October!&lt;/a&gt; To finish reading &lt;a href=&#34;https://www.packtpub.com/application-development/go-programming-blueprints&#34;&gt;Go Programming Blueprints&lt;/a&gt;, fun fact is that I got this book in 2015 as a Father&amp;rsquo;s Day gift. I finished reading it more than one year later. Jeez.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go Programming Blueprints&lt;/strong&gt; was written by &lt;a href=&#34;https://medium.com/@matryer&#34;&gt;Mat Ryer&lt;/a&gt; and published by &lt;a href=&#34;https://www.packtpub.com/&#34;&gt;Packt&lt;/a&gt;. It is the fifth physical Go book I&amp;rsquo;ve read this year and surprisingly it does not overlap any of the other four, as a matter of fact I believe this complements them nicely.&lt;/p&gt;
&lt;p&gt;Although there are lot of things included in this book, the following three are the ones that caught my attention:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Suggestion about &lt;em&gt;Code Readability&lt;/em&gt;: in the example Mat uses a &lt;code&gt;bool&lt;/code&gt; constant to define the animation status, &lt;code&gt;Animate = true&lt;/code&gt; and &lt;code&gt;DontAnimate = false&lt;/code&gt;; this explicitly indicates purpose of those values, much more clear.&lt;/li&gt;
&lt;li&gt;Quick intro to packages:
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; for mocking and testing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/joeshaw/envdecode&#34;&gt;envcode&lt;/a&gt; for populating struct fields from Environment variables.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;How to cleanly exit from the usual &lt;code&gt;Control+C&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best about &lt;strong&gt;Go Programming Blueprints&lt;/strong&gt; is how it&amp;rsquo;s laid out, however I can see it being difficult for newcomers, either new to the language or to programming in general, but if you take the time to read the Manning books first and then this one, you shouldn&amp;rsquo;t have a problem following it and taking advantage of all the snippets and explanations.&lt;/p&gt;
&lt;p&gt;I liked this book, as a matter of fact, I already bought the second edition for reading it in 2017:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;$5 Every Book Every Video? 🤔 For now, I&amp;#39;ll take 3 for next year &lt;a href=&#34;https://twitter.com/hashtag/Packt?src=hash&#34;&gt;#Packt&lt;/a&gt; &lt;a href=&#34;https://t.co/eUdelCbkV0&#34;&gt;pic.twitter.com/eUdelCbkV0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/809795487725453312&#34;&gt;December 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description></item><item><title>Building Go programs using Makefiles</title><link>http://www.mariocarrion.com/2016/12/15/go-makefiles.html</link><pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/15/go-makefiles.html</guid><description>&lt;p&gt;The idiomatic way of installing binaries in Go is using &lt;code&gt;go install &amp;lt;path-to-binary&amp;gt;&lt;/code&gt;, for example something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go install github.com/MarioCarrion/go-makefiles-skeleton/cmd/hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will build and then install the &lt;code&gt;hello&lt;/code&gt; program into your &lt;code&gt;$GOPATH/bin&lt;/code&gt; (of course assuming you previously &lt;code&gt;go get&lt;/code&gt; it), and that is great if that&amp;rsquo;s what you&amp;rsquo;re looking for. However, if you&amp;rsquo;re like me and you use &lt;a href=&#34;http://www.mariocarrion.com/2016/10/31/small-go-docker-image.html&#34;&gt;small docker images&lt;/a&gt; for running your programs on production, then you need to have a Makefile for building all of them consistently; of course this does not mean you can&amp;rsquo;t have the best of both worlds.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume you have a collection of binaries, following the common pattern of defining a package, this package is then used by all the programs in &lt;code&gt;cmd/&lt;/code&gt;, so you would have something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -d *.go */*/*
cmd/hello/main.go cmd/something/main.go something.go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I created a &lt;a href=&#34;https://github.com/MarioCarrion/go-makefiles-skeleton&#34;&gt;small repo&lt;/a&gt; containing this example, so you can follow along; using that said repo you could execute:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go install github.com/MarioCarrion/go-makefiles-skeleton/cmd/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That will build and install both programs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ which hello
/home/mario/goworkspace/bin/hello
$ which something
/home/mario/goworkspace/bin/something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is needed next is to create a Makefile for building all our binaries in a Docker image, then copy those to the static and final image which in the end will be used for the final container. You can follow the &lt;a href=&#34;https://github.com/MarioCarrion/go-makefiles-skeleton/blob/master/Makefile&#34;&gt;Makefile&lt;/a&gt; from the repo, it literally contains the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mariocarrion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;makefiles&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;skeleton&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hello&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;something&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PHONY:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clean&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tty&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:build&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/bin/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cp&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`docker ps -q -n=1`:/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$@&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`docker ps -q -n=1`&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;builddocker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Dockerfile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;builddocker&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tty&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:build&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/bin/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`docker ps -q -n=1`&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:latest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Dockerfile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;gobuild&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;program&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;linux&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ldflags&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;installsuffix&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cgo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$${program}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/go&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;github&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;MarioCarrion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;makefiles&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;skeleton&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$${program};&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important bit is the &lt;code&gt;PROGRAMS&lt;/code&gt; variable, which is currently hardcoded to the existing directories in &lt;code&gt;cmd/&lt;/code&gt; that represent the Go programs to be built. Could we get this variable from the output of a simple &lt;code&gt;ls&lt;/code&gt;? Yes, definitely.&lt;/p&gt;
&lt;p&gt;Another important part of this build is the &lt;a href=&#34;https://github.com/MarioCarrion/go-makefiles-skeleton/blob/master/Dockerfile.static&#34;&gt;static Dockerfile&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# vim: set syntax=dockerfile:&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tianon&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;MAINTAINER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Mario&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Carrion&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;info@xyz&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;COPY&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app/hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CMD&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Again, similar to the Makefile it hardcodes the files to be copied.&lt;/p&gt;
&lt;p&gt;In the end those are the two caveats of this process, you have to explicitly add the programs to both files in order to correctly build the whole thing, I&amp;rsquo;ll think about a better alternative and as soon as I have a fix for this, I&amp;rsquo;ll blog about it for sure.&lt;/p&gt;</description></item><item><title>Finished Reading: Elastic Leadership</title><link>http://www.mariocarrion.com/2016/12/08/elastic-leadership.html</link><pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/08/elastic-leadership.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just finished reading &amp;quot;Elastic Leadership: Growing Self-organizing teams&amp;quot;, 30th of the year! &lt;a href=&#34;https://t.co/5yc8G2DjWi&#34;&gt;pic.twitter.com/5yc8G2DjWi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/807085640382894080&#34;&gt;December 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I was interested in &lt;a href=&#34;https://www.manning.com/books/elastic-leadership&#34;&gt;Elastic Leadership&lt;/a&gt; since I saw the MEAP a couple of months ago, I&amp;rsquo;m always trying to become a better leader and this book seemed like the obvious one to buy.&lt;/p&gt;
&lt;p&gt;I bought &lt;strong&gt;Elastic Leadership&lt;/strong&gt; beginnings of November and started reading right after I finished &lt;a href=&#34;http://www.mariocarrion.com/2016/11/30/specification-by-example.html&#34;&gt;Specification by Example&lt;/a&gt;, to my surprise it did not take me that long to finish. It was an easy read, a few days while commuting and done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elastic Leadership&lt;/strong&gt; resonates with me, having working professionally for more than a decade already I can tell you I have experienced all three phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Survival phase: no time to learn&lt;/li&gt;
&lt;li&gt;Learning phase: learning to solve your own problems&lt;/li&gt;
&lt;li&gt;Self-organizing phase: facilitate, experiment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s like every time I read a book about leadership, (just like when I read &lt;a href=&#34;http://www.mariocarrion.com/2016/03/09/beyond-blame.html&#34;&gt;Beyond Blame&lt;/a&gt;) I feel the author is reading my mind. &lt;strong&gt;Elastic Leadership&lt;/strong&gt; is no exception, it certainly explains the frustration we feel as leaders as well as being part of a team.&lt;/p&gt;
&lt;p&gt;In the end my takeaways from &lt;strong&gt;Elastic Leadership&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always try to leave your comfort zone to get better, do one thing that scares you every day,&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;commitment language&lt;/em&gt; when expressing yourself and in a way invite your peers to use the same language,&lt;/li&gt;
&lt;li&gt;Talk to your teammates and collaborate to avoid being the bottleneck,&lt;/li&gt;
&lt;li&gt;Follow the &lt;a href=&#34;http://5whys.com/manifesto&#34;&gt;Team Leader Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>