<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mario Carrion</title><link>http://www.mariocarrion.com/index.xml</link><description>Recent content on Mario Carrion</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 31 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://www.mariocarrion.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Goodbye 2016: Year in review</title><link>http://www.mariocarrion.com/2016/12/31/year-in-review.html</link><pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/31/year-in-review.html</guid><description>&lt;p&gt;Two years ago &lt;a href=&#34;http://www.mariocarrion.com/2014/12/28/rebooting-this-blog.html&#34;&gt;I wrote&lt;/a&gt; a tiny post about &lt;em&gt;rebooting this blog&lt;/em&gt;. I&amp;rsquo;m happy to say I was able to do that this year 2016, still there&amp;rsquo;s a long way ahead but progress has been made.&lt;/p&gt;
&lt;p&gt;To tell the truth I did not have plans to set monthly reading goals, but having read 20 books in 2015 definitely inspired me to continue with the good habit of reading and learning on my own, just like I used to when I was in high school and college, trying to become a better person and engineer at the same time, all of this &lt;strong&gt;because I want to&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Professionally I need to keep motivating myself, find the time to read, learn and code on my own limited free time, because there&amp;rsquo;s no other way to get better, and I must say I&amp;rsquo;ve been slacking off and getting &lt;em&gt;technologically stagnated&lt;/em&gt; for the last five years, all of that had to change at one point in time. &lt;a href=&#34;http://www.mariocarrion.com/2016/01/26/a-look-back-at-previous-lustrum.html&#34;&gt;Year 2016 was the trigger in this change&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I know 2016 has been a sad year for a lot of people, a lot of crazy things happened in the world, a lot of musicians and actors that I used to listen to and watch when I was younger are gone, considering how the year is ending I know for sure 2017 will be more difficult for everybody, but I won&amp;rsquo;t give up, I really want to become a better person, a better professional and a better family man. I know for sure I can&amp;rsquo;t control what happens around the country and the world, but I can control the most important variable: me, and I will do that.&lt;/p&gt;
&lt;p&gt;From the professional point of view, I will be &lt;em&gt;going all in&lt;/em&gt; with Go, a programming language suggested by one our engineers about 2 years ago. Crazy how much time I wasted before making this &lt;em&gt;official&lt;/em&gt;. I believe Go is a programming language capable of shifting development, its performance and cleanness are what I like the most about it. I will still be using Ruby because there&amp;rsquo;s a ton of legacy code still written in that language, but every single new service that does not heavily depend on any Ruby interfaces will be written in Go. There&amp;rsquo;s no way back, I like Go, its community and I believe it is the best decision for my career. &lt;a href=&#34;http://www.mariocarrion.com/2010/01/21/the-ruby-programming-language.html&#34;&gt;Ruby&lt;/a&gt; and Ruby on Rails were nice, but it&amp;rsquo;s time to move on.&lt;/p&gt;
&lt;p&gt;From the personal point of view, reading will keep me &lt;em&gt;up to date&lt;/em&gt;, my books wishlists include both technical books as well as personal growth/soft skill books. I&amp;rsquo;ll start to read those together with the technical ones as well.&lt;/p&gt;
&lt;p&gt;In the end 2016 did work for me, I was able to accomplish what I wanted:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read more books than the year before, in 2016 I finished reading 31 books, 11 more than in 2015.&lt;/li&gt;
&lt;li&gt;Have multiple Go programs running in production with success.&lt;/li&gt;
&lt;li&gt;Normalize all projects back at work, including code styling, building processes and specially increase code coverage to at least 90% each.&lt;/li&gt;
&lt;li&gt;Use Docker more often, personally and professionally.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In 2017 I will rise my expectations higher otherwise what&amp;rsquo;s the point?&lt;/p&gt;</description></item><item><title>Git Workflow: Rebase and Merge</title><link>http://www.mariocarrion.com/2016/12/28/git-rebase-merge.html</link><pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/28/git-rebase-merge.html</guid><description>
&lt;p&gt;Previous Tip: &lt;a href=&#34;http://www.mariocarrion.com/2016/08/30/git-commit-message.html&#34;&gt;Commit Message Conventions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Continuing the Git series, in this post I&amp;rsquo;ll cover why rebasing over merging can make a huge difference, and why is our preferred way.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-merge-and-rebase&#34;&gt;What is the difference between merge and rebase?&lt;/h3&gt;
&lt;p&gt;Being extremely succinct, &lt;a href=&#34;https://git-scm.com/docs/git-merge&#34;&gt;Merge&lt;/a&gt; and &lt;a href=&#34;https://git-scm.com/docs/git-rebase&#34;&gt;Rebase&lt;/a&gt; are two different ways of adding code from one branch to another, the main difference is how the history will be written after the code is integrated in the target branch as well as how much control you have when joining two branches. Please consider reading the &lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing/&#34;&gt;Atlassian tutorial&lt;/a&gt; it explains both methods with clear graphics.&lt;/p&gt;
&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt; is used when working on feature branches to always be &lt;em&gt;on top&lt;/em&gt; of the all changes that the original branch currently has and any future changes to be pushed by other team members.&lt;/p&gt;
&lt;p&gt;The following will be a common workflow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TKT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;things&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# ... stuff happens and we use the well knonwn &amp;quot;commit&amp;quot; &amp;quot;push&amp;quot; &lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rebase&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# we always keep our branch up to date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then after our feature branch is reviewed and ready to be joined into master, we do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rebase&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;TKT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fix&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;things&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In cases where we are &lt;em&gt;deploying&lt;/em&gt; something into a release branch, we use &lt;code&gt;merge&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;checkout&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;production&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;merge&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That way we can a commit message to indicate some possible changes that indicate what happened during this release.&lt;/p&gt;
&lt;p&gt;The idea of using &lt;code&gt;rebase&lt;/code&gt; instead of &lt;code&gt;merge&lt;/code&gt; when joining branches allows us to have a clean an concise Git history, and to avoid messes like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/mariocarrion/31876330261/in/dateposted-public/&#34;&gt;&lt;img src=&#34;https://c1.staticflickr.com/1/256/31876330261_8e356a1149_o.png&#34; alt=&#34;git rebase VS git merge&#34; title=&#34;git merge VS git rebase&#34; /&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Upgrading Laptop&#39;s hard drive</title><link>http://www.mariocarrion.com/2016/12/20/upgrading-latops-hard-drive.html</link><pubDate>Tue, 20 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/20/upgrading-latops-hard-drive.html</guid><description>&lt;p&gt;Back in 2010 I bought my first ever &lt;a href=&#34;https://support.apple.com/kb/sp582?locale=en_US&#34;&gt;Macbook Pro&lt;/a&gt;, a shiny 2.4 GHz Intel Core i5 with 4GB of RAM. In 2011 I upgraded the memory from 4GB to 8GB with a pair of &lt;a href=&#34;https://smile.amazon.com/gp/product/B001PS9UKW/&#34;&gt;Kingston 4GB Modules&lt;/a&gt;, in 2014 I replaced the original battery with an &lt;a href=&#34;https://smile.amazon.com/gp/product/B00D77FL7K/&#34;&gt;Anker one&lt;/a&gt;, not the best one but whatever; now two years later, 2016, I decided to replace the factory Hard Drive with an SSD, the original Hitachi 320GB with a &lt;a href=&#34;https://smile.amazon.com/gp/product/B01IAGSD5O/&#34;&gt;Crucial 275GB SSD&lt;/a&gt; and &lt;strong&gt;what a great difference!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I believe the huge difference comes because well, the original hard drive is 6 years old already and this new one is an SSD, not a fair comparison but I like the biased results. Everything has improved: booting time, wake up time, even the time it took me to open new iTerm2 tabs, I&amp;rsquo;m so happy. The truth is that before considering replacing the HDD I was thinking about getting a brand new laptop, a Windows Laptop to be precise, I was thinking about a Windows one because multiple developers are really enjoying the Linux integration, so I wanted to give it a try.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;If I write a blog post on my windows/bash dev setup how deep do you want the details?&lt;/p&gt;&amp;mdash; Brian Ketelsen (@bketelsen) &lt;a href=&#34;https://twitter.com/bketelsen/status/801449292716212224&#34;&gt;November 23, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;But you know I was hesitant to buy a new laptop, investing $1,300+ it&amp;rsquo;s too much right now, so for $84 I get what I need at this precise moment, old laptop feels like a new one. Hopefully I can replace my laptop&amp;rsquo;s battery as well because it is time as well.&lt;/p&gt;
&lt;p&gt;Replacing the hard drive was a breeze, iFixit has a &lt;a href=&#34;https://www.ifixit.com/Guide/MacBook+Pro+15-Inch+Unibody+Mid+2010+Hard+Drive+Replacement/3030&#34;&gt;phenomenal guide&lt;/a&gt; that details every step, you just need to have the right tools otherwise you won&amp;rsquo;t go too far (Torx and Tri-win screwdrivers are a pain to find!)&lt;/p&gt;
&lt;p&gt;Installing and upgrading macOS was the thing that took me the most time, about 2-3 hours to have everything installed and upgraded. I tried installing Sierra directly by using the &lt;a href=&#34;https://support.apple.com/en-us/HT201314&#34;&gt;Internet Recovery Option&lt;/a&gt;, but that did not work, I was getting a timeout error because, apparently, my WiFi was not working correctly.&lt;/p&gt;
&lt;p&gt;In the end I installed it from the original DVD (macOS 10.6.5) and slowly upgraded every minor version until 10.7, after that I upgraded to Sierra. Slow process but it worked with zero issues.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Internet Recovery did not work😩 &lt;a href=&#34;https://twitter.com/hashtag/CurrentStatus?src=hash&#34;&gt;#CurrentStatus&lt;/a&gt; &lt;a href=&#34;https://t.co/Z5J1UaE0ZX&#34;&gt;pic.twitter.com/Z5J1UaE0ZX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/811062471997931520&#34;&gt;December 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;After slowly upgrading to 10.6.8, it&amp;#39;s time to jump to 10.7. 2011 here I come! &lt;a href=&#34;https://t.co/OV2IBf4HsW&#34;&gt;pic.twitter.com/OV2IBf4HsW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/811084576617594880&#34;&gt;December 20, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I also had to update my &lt;a href=&#34;https://github.com/MarioCarrion/mc-profile/blob/master/BOOTSTRAP.md&#34;&gt;BOOSTRAP file&lt;/a&gt; to include the most recent changes I had to do to have everything running correctly with this new upgrade. I want to start using Docker for everything (except git and vim) so installing things locally (like &lt;em&gt;rvm&lt;/em&gt;, &lt;em&gt;databases&lt;/em&gt; or whatever required libraries) are no no for me now, no need to clutter my laptop, also containers are life.&lt;/p&gt;</description></item><item><title>Finished Reading: Go Programming Blueprints</title><link>http://www.mariocarrion.com/2016/12/16/go-programming-blueprints.html</link><pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/16/go-programming-blueprints.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;31st of the year! &amp;quot;Go Programming Blueprints&amp;quot;, cover is fixed as well 😌 &lt;a href=&#34;https://t.co/bbyzNBQPGt&#34;&gt;pic.twitter.com/bbyzNBQPGt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/809867795487932417&#34;&gt;December 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I have accomplished what I promised in &lt;a href=&#34;http://www.mariocarrion.com/2016/10/01/october-goals.html&#34;&gt;October!&lt;/a&gt; To finish reading &lt;a href=&#34;https://www.packtpub.com/application-development/go-programming-blueprints&#34;&gt;Go Programming Blueprints&lt;/a&gt;, fun fact is that I got this book in 2015 as a Father&amp;rsquo;s Day gift. I finished reading it more than one year later. Jeez.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go Programming Blueprints&lt;/strong&gt; was written by &lt;a href=&#34;https://medium.com/@matryer&#34;&gt;Mat Ryer&lt;/a&gt; and published by &lt;a href=&#34;https://www.packtpub.com/&#34;&gt;Packt&lt;/a&gt;. It is the fifth physical Go book I&amp;rsquo;ve read this year and surprisingly it does not overlap any of the other four, as a matter of fact I believe this complements them nicely.&lt;/p&gt;
&lt;p&gt;Although there are lot of things included in this book, the following three are the ones that caught my attention:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Suggestion about &lt;em&gt;Code Readability&lt;/em&gt;: in the example Mat uses a &lt;code&gt;bool&lt;/code&gt; constant to define the animation status, &lt;code&gt;Animate = true&lt;/code&gt; and &lt;code&gt;DontAnimate = false&lt;/code&gt;; this explicitly indicates purpose of those values, much more clear.&lt;/li&gt;
&lt;li&gt;Quick intro to packages:
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; for mocking and testing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/joeshaw/envdecode&#34;&gt;envcode&lt;/a&gt; for populating struct fields from Environment variables.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;How to cleanly exit from the usual &lt;code&gt;Control+C&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best about &lt;strong&gt;Go Programming Blueprints&lt;/strong&gt; is how it&amp;rsquo;s laid out, however I can see it being difficult for newcomers, either new to the language or to programming in general, but if you take the time to read the Manning books first and then this one, you shouldn&amp;rsquo;t have a problem following it and taking advantage of all the snippets and explanations.&lt;/p&gt;
&lt;p&gt;I liked this book, as a matter of fact, I already bought the second edition for reading it in 2017:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;$5 Every Book Every Video? 🤔 For now, I&amp;#39;ll take 3 for next year &lt;a href=&#34;https://twitter.com/hashtag/Packt?src=hash&#34;&gt;#Packt&lt;/a&gt; &lt;a href=&#34;https://t.co/eUdelCbkV0&#34;&gt;pic.twitter.com/eUdelCbkV0&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/809795487725453312&#34;&gt;December 16, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description></item><item><title>Building Go programs using Makefiles</title><link>http://www.mariocarrion.com/2016/12/15/go-makefiles.html</link><pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/15/go-makefiles.html</guid><description>&lt;p&gt;The idiomatic way of installing binaries in Go is using &lt;code&gt;go install &amp;lt;path-to-binary&amp;gt;&lt;/code&gt;, for example something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go install github.com/MarioCarrion/go-makefiles-skeleton/cmd/hello
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will build and then install the &lt;code&gt;hello&lt;/code&gt; program into your &lt;code&gt;$GOPATH/bin&lt;/code&gt; (of course assuming you previously &lt;code&gt;go get&lt;/code&gt; it), and that is great if that&amp;rsquo;s what you&amp;rsquo;re looking for. However, if you&amp;rsquo;re like me and you use &lt;a href=&#34;http://www.mariocarrion.com/2016/10/31/small-go-docker-image.html&#34;&gt;small docker images&lt;/a&gt; for running your programs on production, then you need to have a Makefile for building all of them consistently; of course this does not mean you can&amp;rsquo;t have the best of both worlds.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume you have a collection of binaries, following the common pattern of defining a package, this package is then used by all the programs in &lt;code&gt;cmd/&lt;/code&gt;, so you would have something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls -d *.go */*/*
cmd/hello/main.go cmd/something/main.go something.go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I created a &lt;a href=&#34;https://github.com/MarioCarrion/go-makefiles-skeleton&#34;&gt;small repo&lt;/a&gt; containing this example, so you can follow along; using that said repo you could execute:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go install github.com/MarioCarrion/go-makefiles-skeleton/cmd/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That will build and install both programs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ which hello
/home/mario/goworkspace/bin/hello
$ which something
/home/mario/goworkspace/bin/something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is needed next is to create a Makefile for building all our binaries in a Docker image, then copy those to the static and final image which in the end will be used for the final container. You can follow the &lt;a href=&#34;https://github.com/MarioCarrion/go-makefiles-skeleton/blob/master/Makefile&#34;&gt;Makefile&lt;/a&gt; from the repo, it literally contains the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mariocarrion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;makefiles&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;skeleton&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;hello&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;something&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PHONY:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clean&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tty&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:build&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/bin/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cp&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`docker ps -q -n=1`:/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$@&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`docker ps -q -n=1`&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;builddocker&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Dockerfile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;builddocker&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tty&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:build&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;/bin/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`docker ps -q -n=1`&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;rm&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;NAMESPACE&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;:latest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;Dockerfile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;gobuild&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;program&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;PROGRAMS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;linux&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ldflags&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;installsuffix&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cgo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$${program}&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/go&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;github&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;MarioCarrion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;makefiles&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;skeleton&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cmd&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$${program};&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important bit is the &lt;code&gt;PROGRAMS&lt;/code&gt; variable, which is currently hardcoded to the existing directories in &lt;code&gt;cmd/&lt;/code&gt; that represent the Go programs to be built. Could we get this variable from the output of a simple &lt;code&gt;ls&lt;/code&gt;? Yes, definitely.&lt;/p&gt;
&lt;p&gt;Another important part of this build is the &lt;a href=&#34;https://github.com/MarioCarrion/go-makefiles-skeleton/blob/master/Dockerfile.static&#34;&gt;static Dockerfile&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# vim: set syntax=dockerfile:&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tianon&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;MAINTAINER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Mario&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;Carrion&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;info@xyz&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;COPY&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;ENTRYPOINT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/app/hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;CMD&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Again, similar to the Makefile it hardcodes the files to be copied.&lt;/p&gt;
&lt;p&gt;In the end those are the two caveats of this process, you have to explicitly add the programs to both files in order to correctly build the whole thing, I&amp;rsquo;ll think about a better alternative and as soon as I have a fix for this, I&amp;rsquo;ll blog about it for sure.&lt;/p&gt;</description></item><item><title>Finished Reading: Elastic Leadership</title><link>http://www.mariocarrion.com/2016/12/08/elastic-leadership.html</link><pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/08/elastic-leadership.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Just finished reading &amp;quot;Elastic Leadership: Growing Self-organizing teams&amp;quot;, 30th of the year! &lt;a href=&#34;https://t.co/5yc8G2DjWi&#34;&gt;pic.twitter.com/5yc8G2DjWi&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/807085640382894080&#34;&gt;December 9, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I was interested in &lt;a href=&#34;https://www.manning.com/books/elastic-leadership&#34;&gt;Elastic Leadership&lt;/a&gt; since I saw the MEAP a couple of months ago, I&amp;rsquo;m always trying to become a better leader and this book seemed like the obvious one to buy.&lt;/p&gt;
&lt;p&gt;I bought &lt;strong&gt;Elastic Leadership&lt;/strong&gt; beginnings of November and started reading right after I finished &lt;a href=&#34;http://www.mariocarrion.com/2016/11/30/specification-by-example.html&#34;&gt;Specification by Example&lt;/a&gt;, to my surprise it did not take me that long to finish. It was an easy read, a few days while commuting and done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Elastic Leadership&lt;/strong&gt; resonates with me, having working professionally for more than a decade already I can tell you I have experienced all three phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Survival phase: no time to learn&lt;/li&gt;
&lt;li&gt;Learning phase: learning to solve your own problems&lt;/li&gt;
&lt;li&gt;Self-organizing phase: facilitate, experiment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&amp;rsquo;s like every time I read a book about leadership, (just like when I read &lt;a href=&#34;http://www.mariocarrion.com/2016/03/09/beyond-blame.html&#34;&gt;Beyond Blame&lt;/a&gt;) I feel the author is reading my mind. &lt;strong&gt;Elastic Leadership&lt;/strong&gt; is no exception, it certainly explains the frustration we feel as leaders as well as being part of a team.&lt;/p&gt;
&lt;p&gt;In the end my takeaways from &lt;strong&gt;Elastic Leadership&lt;/strong&gt; are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always try to leave your comfort zone to get better, do one thing that scares you every day,&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;commitment language&lt;/em&gt; when expressing yourself and in a way invite your peers to use the same language,&lt;/li&gt;
&lt;li&gt;Talk to your teammates and collaborate to avoid being the bottleneck,&lt;/li&gt;
&lt;li&gt;Follow the &lt;a href=&#34;http://5whys.com/manifesto&#34;&gt;Team Leader Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Goals: December 2016</title><link>http://www.mariocarrion.com/2016/12/01/december-goals.html</link><pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/12/01/december-goals.html</guid><description>
&lt;p&gt;This is it. Last month of 2016. I&amp;rsquo;m super excited because I believe I made some personal progress. Let&amp;rsquo;s see what I planned last &lt;a href=&#34;http://www.mariocarrion.com/2016/11/01/november-goals.html&#34;&gt;November&lt;/a&gt;:&lt;/p&gt;
&lt;h2 id=&#34;finish-reading-go-in-practice&#34;&gt;Finish reading &amp;ldquo;Go In Practice&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Completed during the &lt;a href=&#34;http://www.mariocarrion.com/2016/11/02/go-in-practice.html&#34;&gt;beginning of November&lt;/a&gt;, last of the Go series published by Manning.&lt;/p&gt;
&lt;h2 id=&#34;finish-reading-go-programming-blueprints&#34;&gt;Finish reading &amp;ldquo;Go Programming Blueprints&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I did not even start reading it yet, the funny thing is that there is a new edition already published. &lt;code&gt;¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;hack-dynamic-docker-composer&#34;&gt;Hack &amp;ldquo;Dynamic Docker Composer&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I did &lt;em&gt;hack&lt;/em&gt; a little, the truth is that I decided to rename the project to &lt;em&gt;templenv&lt;/em&gt; to make it much more generic, because it isn&amp;rsquo;t only used for Docker Compose, it could be used for generating any dynamic file.&lt;/p&gt;
&lt;h2 id=&#34;hack-gitlab-api-integration&#34;&gt;Hack &amp;ldquo;Gitlab API integration&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I will pause working on this until I finish, for real, &lt;em&gt;templenv&lt;/em&gt; which is a precondition for this project.&lt;/p&gt;
&lt;h2 id=&#34;start-gofication-at-work&#34;&gt;Start &amp;ldquo;Gofication&amp;rdquo; at work&lt;/h2&gt;
&lt;p&gt;Slow progress, the truth is that because of the holiday season changing things is kind of risky, of instead of making production changes, I&amp;rsquo;m researching a lot and obviously reading a lot. I&amp;rsquo;m excited for 2017, I will change things.&lt;/p&gt;
&lt;h3 id=&#34;what-am-i-planning-for-december&#34;&gt;What am I planning for December?&lt;/h3&gt;
&lt;p&gt;Finish reading &lt;em&gt;Go Programming Blueprints&lt;/em&gt;, &lt;em&gt;Elastich Leadership&lt;/em&gt; and rest, &lt;strong&gt;rest a lot&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Finished Reading: Specification by Example</title><link>http://www.mariocarrion.com/2016/11/30/specification-by-example.html</link><pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/11/30/specification-by-example.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Last of November! &amp;quot;Specification by Example&amp;quot; &lt;a href=&#34;https://t.co/Hz6yhqdQVY&#34;&gt;pic.twitter.com/Hz6yhqdQVY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/804320393389633536&#34;&gt;December 1, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Just finished reading the last book of November: &lt;a href=&#34;https://www.manning.com/books/specification-by-example&#34;&gt;Specification by Example&lt;/a&gt;, written by &lt;a href=&#34;https://gojko.net/&#34;&gt;Gojko Adzic&lt;/a&gt; and published in 2011 by Manning Publications.&lt;/p&gt;
&lt;p&gt;Specification by Example is a book about specifications, testing and software delivery. The full idea is sort of simple, you work in collaboration with programers and stakeholders to define human-readable specifications, that you can run continuously during your continuous integration process, you iterate as you would any given day and in the long run you can use those specifications to document your system. Pretty straightforward.&lt;/p&gt;
&lt;p&gt;Personally, I agree with everything Gojko said in this book, the difficult thing to me is not to implement the process itself; it is more the fact that introducing something like this will take some time, there&amp;rsquo;s the learning curve as well as the human friction when adding a new step to the workflow. Pretty much everything becomes &amp;ldquo;slower&amp;rdquo; for everybody, or that&amp;rsquo;s what everybody thinks.&lt;/p&gt;
&lt;p&gt;In my experience having a system with no runnable tests, may seem like a good idea in the beginning because hey you&amp;rsquo;re implementing everything super fast; but in the long term it&amp;rsquo;s a huge liability, you&amp;rsquo;re basically blind when trying to fix bugs or make improvements, there&amp;rsquo;s no safety net, not to mention there&amp;rsquo;s no actual up-to-date documentation explaining any algorithms you implemented or system workflows. You&amp;rsquo;re in dark.&lt;/p&gt;
&lt;p&gt;Specification by Example is old, but I still believe most of the topics covered make sense, specially because there&amp;rsquo;s no specific reference to a tool, it&amp;rsquo;s more like how you write your specifications and not what you use to write your specifications.&lt;/p&gt;</description></item><item><title>GothamGo 2016: Conferences day</title><link>http://www.mariocarrion.com/2016/11/18/gotham-go-2016.html</link><pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/11/18/gotham-go-2016.html</guid><description>&lt;p&gt;&lt;a href=&#34;https://www.flickr.com/photos/mariocarrion/31100888985/in/dateposted-public/&#34;&gt;&lt;img src=&#34;https://c2.staticflickr.com/6/5697/31100888985_1f09e6ff26_m.jpg&#34; alt=&#34;GothamGo 2016&#34; title=&#34;GothamGo 2016&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally what everybody was waiting for: &lt;strong&gt;conferences day!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://gothamgo.com/&#34;&gt;GothamGo 2016&lt;/a&gt; had the &lt;a href=&#34;http://www.nyit.edu/aob&#34;&gt;NYIT Auditorium on Broadway&lt;/a&gt; as the venue, which is basically just medium-sized lobby with an auditorium downstairs, with a max capacity of 280 people, or something like that. The auditorium is cool, I think for event it made perfect sense, and I&amp;rsquo;m glad there was free Wi-Fi because there is no signal downstairs.&lt;/p&gt;
&lt;p&gt;Either way, the venue is not that important what is important is the speakers themselves and their talks, it is worth mentioning the phenomenal job done by Mark Bates and Steve Francia as the MCs, they ruled as Master of Ceremonies. Also the activities in between the talks were really cool, that scavenging hunt? that was fun.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;We have &lt;a href=&#34;https://twitter.com/spf13&#34;&gt;@spf13&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/markbates&#34;&gt;@markbates&lt;/a&gt; on staging getting everyone to play Speaker Bingo. &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&#34;&gt;#golang&lt;/a&gt; &lt;a href=&#34;https://twitter.com/gothamgo&#34;&gt;@gothamgo&lt;/a&gt; &lt;a href=&#34;https://t.co/dCKihi8Qos&#34;&gt;pic.twitter.com/dCKihi8Qos&lt;/a&gt;&lt;/p&gt;&amp;mdash; William Kennedy (@goinggodotnet) &lt;a href=&#34;https://twitter.com/goinggodotnet/status/799637167253417984&#34;&gt;November 18, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;The &lt;a href=&#34;http://gothamgo.com/program&#34;&gt;GothamGo 2016 program&lt;/a&gt; included a little bit of everything, from beginner talks to community related talks and obviously some really technical ones. I took a &lt;a href=&#34;https://www.flickr.com/photos/mariocarrion/albums/72157676797694265&#34;&gt;few pictures&lt;/a&gt; of the talks, sadly I kind of stop paying attention and forgot to take pictures of a few of them. Shame on me. The good news is that a lot of people were active on social media, so just search for &lt;a href=&#34;https://twitter.com/search?q=%23GothamGo&amp;amp;src=typd&#34;&gt;#GothamGo on twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the end it was great experience, first time attending a Go conference, the community really seems to be involved and really willing to share their knowledge to make the language much more popular.&lt;/p&gt;
&lt;p&gt;The stickers are really cool as well&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Look at these cool stickers &lt;a href=&#34;https://twitter.com/hashtag/GothamGo?src=hash&#34;&gt;#GothamGo&lt;/a&gt; &lt;a href=&#34;https://t.co/6RfQk7YQAV&#34;&gt;pic.twitter.com/6RfQk7YQAV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/799686559557632004&#34;&gt;November 18, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;See you next year&lt;/p&gt;</description></item><item><title>GothamGo 2016: Advanced Go Workshop</title><link>http://www.mariocarrion.com/2016/11/17/gotham-go-2016-advanced-go-workshop.html</link><pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/11/17/gotham-go-2016-advanced-go-workshop.html</guid><description>&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;.&lt;a href=&#34;https://twitter.com/goinggodotnet&#34;&gt;@goinggodotnet&lt;/a&gt; kicks off his advanced go workshop for &lt;a href=&#34;https://twitter.com/gothamgo&#34;&gt;@gothamgo&lt;/a&gt; at &lt;a href=&#34;https://twitter.com/eBay&#34;&gt;@eBay&lt;/a&gt; offices &lt;a href=&#34;https://t.co/AlFHU0aX2L&#34;&gt;pic.twitter.com/AlFHU0aX2L&lt;/a&gt;&lt;/p&gt;&amp;mdash; GothamGo Nov 18 (@gothamgo) &lt;a href=&#34;https://twitter.com/gothamgo/status/799254038705340416&#34;&gt;November 17, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I discovered &lt;a href=&#34;http://gothamgo.com/&#34;&gt;GothamGo&lt;/a&gt; last year while reading about Go, sadly, I missed &lt;a href=&#34;https://www.youtube.com/playlist?list=PLeGxIOPLk9ELh9tsPZMzau6CzMjfMzp9-&#34;&gt;GothamGo 2015&lt;/a&gt;. This year I wanted to change that, I did not want to miss the opportunity, so I decided to take two days off from work and go all in!&lt;/p&gt;
&lt;p&gt;I attended &lt;a href=&#34;https://www.goinggo.net/&#34;&gt;Bill&amp;rsquo;s&lt;/a&gt; Workshop, called: &lt;a href=&#34;https://www.ardanlabs.com/advanced-ultimate-go&#34;&gt;Advanced Go&lt;/a&gt;, Bill Kennedy is one of the authors of &lt;a href=&#34;http://www.mariocarrion.com/2016/07/15/go-in-action.html&#34;&gt;Go in Action&lt;/a&gt;, one of my favorite and easy to read Go books.&lt;/p&gt;
&lt;p&gt;To be honest with you this is my first workshop, &lt;strong&gt;ever&lt;/strong&gt;. I honestly believed that it was going to be a little bit &lt;em&gt;hard&lt;/em&gt; for me to follow up, I don&amp;rsquo;t know&amp;hellip; I guess I&amp;rsquo;m always a pessimist guy. Either way I&amp;rsquo;m pleasantly surprised my previous &lt;a href=&#34;http://www.mariocarrion.com/2011/01/12/die-bug.html&#34;&gt;debugging experience&lt;/a&gt; as well as my CS background help me to understand with no issues everything Bill said.&lt;/p&gt;
&lt;p&gt;Bill&amp;rsquo;s program covered the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MC1EKLQ2Wmg&#34;&gt;Mechanical Sympathy&lt;/a&gt;: which honestly did not know about it until after listening to &lt;a href=&#34;https://changelog.com/gotime/6&#34;&gt;GoTime&amp;rsquo;s episode 6&lt;/a&gt;, which obviously has the same name and has Bill as the guest. To me this was the most refreshing topic, it was really nice to listen someone talk about CPU caches, processors, hardware and how all of that matters when developing software.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/api/composition&#34;&gt;Data Oriented Design&lt;/a&gt;: important topic for people new to Go, to think how to represent all the different things you want to build based on their behavior instead of what they are.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/concurrency&#34;&gt;Concurrency&lt;/a&gt;: explanation about Goroutines, Channels, how the behave with the processor, memory sharing and whatnot.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/testing&#34;&gt;Testing&lt;/a&gt;: testing examples.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/testing/benchmarks&#34;&gt;Benchmarking&lt;/a&gt;: concrete benchmarking, for improving your code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/topics/profiling&#34;&gt;Profiling and Debugging&lt;/a&gt;: this was the most interesting thing to me, how to profile and understand the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a cool surprise &lt;a href=&#34;https://twitter.com/FiloSottile&#34;&gt;Filipo&lt;/a&gt; was also there, and he showed us how to trace networking as well as system calls. Pretty cool stuff.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;What a treat! &lt;a href=&#34;https://twitter.com/FiloSottile&#34;&gt;@FiloSottile&lt;/a&gt; teaching about tracing, networking and http at the &lt;a href=&#34;https://twitter.com/gothamgo&#34;&gt;@gothamgo&lt;/a&gt; workshop. &lt;a href=&#34;https://twitter.com/hashtag/golang?src=hash&#34;&gt;#golang&lt;/a&gt; &lt;a href=&#34;https://t.co/HeryCtG3iR&#34;&gt;pic.twitter.com/HeryCtG3iR&lt;/a&gt;&lt;/p&gt;&amp;mdash; William Kennedy (@goinggodotnet) &lt;a href=&#34;https://twitter.com/goinggodotnet/status/799367059222265858&#34;&gt;November 17, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I personally enjoyed this workshop a lot, Bill&amp;rsquo;s way of explaining things, his enthusiasm and stories blend nicely with the topics covered. For me it was a phenomenal way to kick off GothamGo 2016.&lt;/p&gt;</description></item><item><title>Amazon Kinesis Firehose: One month later</title><link>http://www.mariocarrion.com/2016/11/07/amazon-kinesis-one-month-ago.html</link><pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/11/07/amazon-kinesis-one-month-ago.html</guid><description>
&lt;p&gt;Since 2014 one of the things I&amp;rsquo;ve been trying to do with our services is to lean towards Data Streaming while breaking up all the monolithic-like services into much more specific ones. One of those services was the one in charge of receiving data and inserting into our &lt;a href=&#34;https://aws.amazon.com/redshift/&#34;&gt;Data warehouse&lt;/a&gt;, the truth is that although the endpoint and the importer were separated it could not keep up with that amount of traffic we decided to track.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&#34;https://aws.amazon.com/blogs/aws/amazon-kinesis-firehose-simple-highly-scalable-data-ingestion/&#34;&gt;Kinesis Firehose&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;em&gt;Kinesis Firehose&lt;/em&gt; was announced I knew for sure it will be great solution for our problem, but sadly I couldn&amp;rsquo;t make the switch, lack of resources, different priorities and what not. &lt;strong&gt;That&lt;/strong&gt; changed until recently, and oh boy what a nice change.&lt;/p&gt;
&lt;p&gt;Not only we get the usual benefits of using &lt;strong&gt;a&lt;/strong&gt; Data Stream, but also we can handle much more traffic and all the data is copied into Redshift with no problems. Now, the truth is there some things, not at lot, to consider when making this change.&lt;/p&gt;
&lt;h2 id=&#34;redshift-considerations&#34;&gt;Redshift considerations&lt;/h2&gt;
&lt;p&gt;If you are familiar with Redshift, then you already know what to do, but if not keep at least the following things in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values must be correctly escaped and truncated, use your COPY options wisely.&lt;/li&gt;
&lt;li&gt;When adding new columns to the schema make sure you use &lt;em&gt;FILLRECORD&lt;/em&gt; in the COPY Command options in Kinesis.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kinesis-considerations&#34;&gt;Kinesis considerations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sending data to Firehose takes time, make sure you send all of it asynchronously.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;PutRecordBatch&lt;/strong&gt; and send as much data as possible, the &lt;a href=&#34;http://docs.aws.amazon.com/firehose/latest/dev/limits.html&#34;&gt;maximum is 4 MB&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thoughts-so-far&#34;&gt;Thoughts so far&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m pleased with the performance of Kinesis Firehose and, obviously, Redshift; I&amp;rsquo;m also happy we have this ready and &lt;em&gt;battletested&lt;/em&gt; before the holiday season.&lt;/p&gt;</description></item><item><title>Finished Reading: Go in Practice</title><link>http://www.mariocarrion.com/2016/11/02/go-in-practice.html</link><pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/11/02/go-in-practice.html</guid><description>&lt;p&gt;&lt;a href=&#34;http://www.mariocarrion.com/2016/11/01/november-goals.html&#34;&gt;Yesterday I mentioned&lt;/a&gt; I was close to finish reading &lt;a href=&#34;https://www.manning.com/books/go-in-practice&#34;&gt;Go in Practice&lt;/a&gt; and today, I was two chapters away, on my way to work I finished one of the and tonight before heading home I tweeted about it&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Last chapter &amp;quot;Reflection and Code Generation&amp;quot; and I&amp;#39;m done! 🎉&amp;quot;Go in Practice&amp;quot; &lt;a href=&#34;https://t.co/X1FmRPsRep&#34;&gt;pic.twitter.com/X1FmRPsRep&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/793921434863202304&#34;&gt;November 2, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Similar to &lt;a href=&#34;http://www.mariocarrion.com/2016/09/19/docker-in-practice.html&#34;&gt;Docker in Practice&lt;/a&gt; this book is all about tips, tricks and techniques related to the Go programming language. My favorites, in order of appearance, are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Graceful shutdown using &lt;a href=&#34;https://github.com/braintree/manners&#34;&gt;manners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Several techniques for recovering from panics&lt;/li&gt;
&lt;li&gt;Embedding files in a binary&lt;/li&gt;
&lt;li&gt;Passing and handling errors over HTTP&lt;/li&gt;
&lt;li&gt;Chapter 10: Communication between cloud services&lt;/li&gt;
&lt;li&gt;Chapter 11: Reflection and code generation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Really happy with this book, it complements &lt;a href=&#34;http://www.mariocarrion.com/2016/07/15/go-in-action.html&#34;&gt;Go In Action&lt;/a&gt; and &lt;a href=&#34;http://www.mariocarrion.com/2016/10/06/go-web-programming.html&#34;&gt;Go Web Programming&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Goals: November 2016</title><link>http://www.mariocarrion.com/2016/11/01/november-goals.html</link><pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/11/01/november-goals.html</guid><description>
&lt;p&gt;Two more months and that&amp;rsquo;s it! 2017 has been a great personal and professional experience so far. Let&amp;rsquo;s see what I planned to accomplish in &lt;a href=&#34;http://www.mariocarrion.com/2016/10/01/october-goals.html&#34;&gt;October&lt;/a&gt;:&lt;/p&gt;
&lt;h2 id=&#34;finish-reading-go-web-programming&#34;&gt;Finish reading &amp;ldquo;Go Web Programming&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;That was completed the &lt;a href=&#34;http://www.mariocarrion.com/2016/10/06/go-web-programming.html&#34;&gt;first week of October&lt;/a&gt;, great book, really well planned.&lt;/p&gt;
&lt;h2 id=&#34;finish-reading-go-in-practice&#34;&gt;Finish reading &amp;ldquo;Go in Practice&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I haven&amp;rsquo;t finished this one yet, I&amp;rsquo;m so close to do it, the format is, not surprisingly, similar to &lt;a href=&#34;http://www.mariocarrion.com/2016/09/19/docker-in-practice.html&#34;&gt;Docker in Practice&lt;/a&gt;, it&amp;rsquo;s filled with a lot of great tips and suggestion, I&amp;rsquo;ll blog about it as soon as I finish it.&lt;/p&gt;
&lt;h2 id=&#34;finish-reading-go-programming-blueprints&#34;&gt;Finish reading &amp;ldquo;Go Programming Blueprints&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;I got this book last year and sadly I haven&amp;rsquo;t started reading it yet, I did browse some pages though. It is the last physical Go book missing to be read, it should be completed this month, no doubt about it.&lt;/p&gt;
&lt;h2 id=&#34;hack-more-dynamic-docker-composer&#34;&gt;Hack more &amp;ldquo;Dynamic Docker Composer&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;The bad news is that I haven&amp;rsquo;t written a line of code since last time, the good news is that we will be implementing (&lt;strong&gt;finally&lt;/strong&gt;) the Docker Container Workflow at work, it only took about a year to accomplish all of this, kind of disappointing but what I do?&lt;/p&gt;
&lt;h3 id=&#34;what-am-i-planning-for-november&#34;&gt;What am I planning for November?&lt;/h3&gt;
&lt;p&gt;Obviously finish &lt;strong&gt;Go in Practice&lt;/strong&gt;, finish &lt;strong&gt;Go Programming Blueprints&lt;/strong&gt;, hack some &lt;strong&gt;Dynamic Docker Composer&lt;/strong&gt; and some &lt;strong&gt;Gitlab API integration&lt;/strong&gt; and hopefully at work start replacing the previous Ruby-based webservices with Go-based ones, because the truth is that we are hitting the ceiling with what we have.&lt;/p&gt;</description></item><item><title>Small(est) Docker Image for Go Programs</title><link>http://www.mariocarrion.com/2016/10/31/small-go-docker-image.html</link><pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/10/31/small-go-docker-image.html</guid><description>
&lt;p&gt;At work I&amp;rsquo;ve been focused recently on building more and more Go and Docker-related projects, all of them so far, follow the same pattern: use Docker Container to build a statically linked Go program &lt;strong&gt;AND&lt;/strong&gt; use Docker Container for running that said Go program.&lt;/p&gt;
&lt;p&gt;There a lot of articles related to creating small Docker images for &lt;a href=&#34;https://github.com/MarioCarrion/small-go-docker-skeleton/blob/master/main.go&#34;&gt;Go programs&lt;/a&gt;, I&amp;rsquo;ll share with you my minimal Dockerfiles (&lt;a href=&#34;https://github.com/MarioCarrion/small-go-docker-skeleton/blob/master/Dockerfile.build&#34;&gt;build&lt;/a&gt; and &lt;a href=&#34;https://github.com/MarioCarrion/small-go-docker-skeleton/blob/master/Dockerfile.static&#34;&gt;static&lt;/a&gt;), &lt;a href=&#34;https://github.com/MarioCarrion/small-go-docker-skeleton/blob/master/Makefile&#34;&gt;Makefile&lt;/a&gt; and a simple program that uses both the &lt;a href=&#34;https://github.com/joho/godotenv&#34;&gt;godotenv&lt;/a&gt; and requires SSL certificates, which seem to be the basic two requirements when building new Go Programs, there&amp;rsquo;s a &lt;a href=&#34;https://github.com/MarioCarrion/small-go-docker-skeleton&#34;&gt;fancy Github repo&lt;/a&gt; that includes the full example.&lt;/p&gt;
&lt;p&gt;Full disclaimer: this post is heavily inspired by &lt;a href=&#34;https://blog.codeship.com/building-minimal-docker-containers-for-go-applications/&#34;&gt;Codeship&amp;rsquo;s&lt;/a&gt; covering the same topic.&lt;/p&gt;
&lt;h2 id=&#34;go-program&#34;&gt;Go Program&lt;/h2&gt;
&lt;p&gt;It loads the &lt;code&gt;.env&lt;/code&gt; file from a volume: &lt;strong&gt;/app/.env&lt;/strong&gt; where it expects to have defined a variable called &lt;strong&gt;QUERY&lt;/strong&gt;, this has to be a properly formatted query string parameter.&lt;/p&gt;
&lt;h2 id=&#34;dockerfile-build&#34;&gt;Dockerfile.build&lt;/h2&gt;
&lt;p&gt;Defines the Dockerfile to be used for building the Go program, internally uses the Makefile to properly calling the right arguments to use to generate the binary.&lt;/p&gt;
&lt;h2 id=&#34;dockerfile-static&#34;&gt;Dockerfile.static&lt;/h2&gt;
&lt;p&gt;Defines the Dockerfile to be used for generating the final small Docker image, this will be final image to be used in production.&lt;/p&gt;
&lt;h2 id=&#34;makefile&#34;&gt;Makefile&lt;/h2&gt;
&lt;p&gt;It defines the rules for building the Go program running in the container, as well as the commands needed for building and running the actual Docker containers.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Obviously I&amp;rsquo;m missing other important things like the CI/CD rules for tests, running &lt;code&gt;go fmt&lt;/code&gt; and whatever else we need to run, but well, it&amp;rsquo;s easy to add. There&amp;rsquo;s also the &lt;a href=&#34;https://hub.docker.com/r/mariocarrion/small-go-docker-skeleton/&#34;&gt;Docker Hub&lt;/a&gt; for this repo, feel free to poke around.&lt;/p&gt;</description></item><item><title>Migrated: From Jekyll to Hugo</title><link>http://www.mariocarrion.com/2016/10/19/hugo-migration.html</link><pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate><guid>http://www.mariocarrion.com/2016/10/19/hugo-migration.html</guid><description>
&lt;p&gt;If I recall correctly this is the fourth time migrating my blog to a different service or engine, I started using &lt;a href=&#34;https://en.wikipedia.org/wiki/Blogger_(service)&#34;&gt;Blogger&lt;/a&gt;, migrated to &lt;a href=&#34;https://en.wikipedia.org/wiki/WordPress&#34;&gt;Wordpress&lt;/a&gt;, then &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; and now &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The truth is that after migrating and building my blog for the first time with Hugo I was extremely surprised: &lt;strong&gt;it took less than 400ms&lt;/strong&gt;, with Jekyll? It takes more than 5 minutes! Sometimes even more specially when you start getting errors that prevent the build, not to mention that the automatic rebuild after resaving does not seem to work properly.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My night so far: Mets get swept. Jekyll keeps throwing: &amp;quot;jekyll 2.4.0 | Error: Rate limit exceeded&amp;quot; &lt;a href=&#34;https://t.co/Qq7NcKKKTR&#34;&gt;pic.twitter.com/Qq7NcKKKTR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mario Carrion (@mariocarrion) &lt;a href=&#34;https://twitter.com/mariocarrion/status/778790542452883456&#34;&gt;September 22, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;how-was-it&#34;&gt;How was it?&lt;/h2&gt;
&lt;p&gt;Migrating to Hugo was pretty straightforward, I followed the official &lt;a href=&#34;https://gohugo.io/tutorials/migrate-from-jekyll/&#34;&gt;Migrate to Hugo from Jekyll&lt;/a&gt; guide, then I reworked my &lt;a href=&#34;https://github.com/swanson/lagom&#34;&gt;Lagom theme&lt;/a&gt; to implement it using &lt;a href=&#34;http://gohugo.io/templates/go-templates/&#34;&gt;Go&amp;rsquo;s template system&lt;/a&gt;. It took me about 3 weeknights to complete the whole migration. From that I learned the following:&lt;/p&gt;
&lt;h3 id=&#34;embedded-tweets&#34;&gt;Embedded tweets&lt;/h3&gt;
&lt;p&gt;In Jekyll I used the &lt;a href=&#34;https://github.com/rob-murray/jekyll-twitter-plugin&#34;&gt;jekyll-twitter-plugin&lt;/a&gt; to embed tweets, Hugo includes a &lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;shortcode&lt;/a&gt; called, surprisingly, &lt;strong&gt;tweet&lt;/strong&gt;. So stuff like this:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
{% twitter oembed https://twitter.com/mariocarrion/status/771469295431868416 %}
&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
{{&amp;lt; tweet 779294387348135936 &amp;gt;}}
&lt;/pre&gt;
&lt;h3 id=&#34;permalinks&#34;&gt;Permalinks&lt;/h3&gt;
&lt;p&gt;Permalinks are built by default using the following format:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
/2016/10/06/go-web-programming/index.html
&lt;/pre&gt;
&lt;p&gt;That does not work for me, because of the SEO, so I had to rename all the posts to the &lt;strong&gt;date+article-name.html&lt;/strong&gt; format, so those became:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
/2016/10/06/go-web-programming.html
&lt;/pre&gt;
&lt;h3 id=&#34;post-references&#34;&gt;Post references&lt;/h3&gt;
&lt;p&gt;In Jekyll links to your own posts on your blog use the following format:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
{% post_url 2016-09-16-first-sprint-with-go-and-docker %})
&lt;/pre&gt;
&lt;p&gt;In Hugo there are two shortcodes for generating links like that, either relative or absolute, so previous Jekyll links became something like the following:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
{{&amp;lt; relref &#34;2016-09-16-first-sprint-with-go-and-docker.markdown&#34; &amp;gt;}}
&lt;/pre&gt;
&lt;h3 id=&#34;syntax-highlighting&#34;&gt;Syntax Highlighting&lt;/h3&gt;
&lt;p&gt;Jekyll uses something like:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
{% highlight ruby %}
puts &#39;foo&#39;
{% endhighlight %}
&lt;/pre&gt;
&lt;p&gt;The migration script correctly migrated those tags above to the Hugo format, so everything became:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
{{&amp;lt; highlight ruby &amp;gt;}}
puts &#39;foo&#39;
{{&amp;lt; / highlight &amp;gt;}}
&lt;/pre&gt;
&lt;p&gt;However I didn&amp;rsquo;t have any syntax highlighting, fixing this issue was easy after reading &lt;a href=&#34;https://gohugo.io/extras/highlighting/&#34;&gt;the official guide&lt;/a&gt;; I was missing the &lt;strong&gt;pygmentize&lt;/strong&gt; command, installing &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt; fixed the issue:&lt;/p&gt;
&lt;pre class=&#34;black-pre&#34;&gt;
easy_install Pygments
&lt;/pre&gt;
&lt;h2 id=&#34;archive-page&#34;&gt;Archive page&lt;/h2&gt;
&lt;p&gt;In Jekyll I built the &lt;a href=&#34;http://www.mariocarrion.com/archive.html&#34;&gt;Archive page&lt;/a&gt; using Liquid, in Hugo I had to rewrite everything &lt;a href=&#34;https://github.com/MarioCarrion/mariocarrion.github.com/blob/master/themes/lagom/layouts/shortcodes/archive_list.html&#34;&gt;using a shortcode&lt;/a&gt;, and then reference this shortcode from &lt;a href=&#34;https://github.com/MarioCarrion/mariocarrion.github.com/blob/master/content/pages/archive.markdown&#34;&gt;the page itself&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;html-and-css-minification&#34;&gt;HTML and CSS minification&lt;/h2&gt;
&lt;p&gt;Minification in Jekyll was handled through the &lt;a href=&#34;https://github.com/stereobooster/jekyll-press&#34;&gt;jekyll-press&lt;/a&gt;; Hugo does not support anything similar out of box, instead what is suggested is to use a external tool for doing so, one of the recommended options is &lt;a href=&#34;https://github.com/tdewolff/minify/tree/master/cmd/minify&#34;&gt;Minify&lt;/a&gt;. In the end I made a &lt;a href=&#34;https://github.com/MarioCarrion/mariocarrion.github.com/blob/master/Makefile&#34;&gt;Makefile&lt;/a&gt; that calls &lt;em&gt;Hugo&lt;/em&gt; and &lt;em&gt;minify&lt;/em&gt; to generate the final site, all is working really good.&lt;/p&gt;
&lt;h2 id=&#34;cleanup-program&#34;&gt;Cleanup program&lt;/h2&gt;
&lt;p&gt;In order to save myself some time and make sure there were no errors while replacing the old tags with the new tags (tweet tags, renaming the permalinks and cleaning up old fronmatter tags) I wrote a &lt;a href=&#34;https://github.com/MarioCarrion/jekyll-to-hugo&#34;&gt;Go program&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What I&amp;rsquo;m missing right now are the Open Graph and Twitter meta tags for properly displaying the content when sharing, I&amp;rsquo;ll be working on that next, for now everything builds faster and I could not be any happier.&lt;/p&gt;</description></item></channel></rss>