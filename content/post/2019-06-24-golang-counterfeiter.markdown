---
date: "2019-06-24"
title: "Go Tool: counterfeiter"
description: "counterfeiter a tool generating type-safe doubles in Go."
url: /2019/06/24/golang-tools-counterfeiter.html
---

[**counterfeiter**](https://github.com/maxbrunsfeld/counterfeiter) has been one of those tools we can not live without when building software in Go, specially because we build our enterprise systems using [Domain Driven Design]({{< relref "2018-11-07-ddd-golang-loteria.markdown" >}}) and we heavily use Dependency Injection to properly separate and test layers independently.

I briefly mentioned `counterfeiter` in [my previous _Go Tool_ post]({{< relref "2019-04-17-golang-retool.markdown" >}}), this time I will dive a bit deeper.

`counterfeiter` is useful when using [`generate`](https://blog.golang.org/generate) directives in your code to automatically generate Fakes/Doubles/Mocks from dependent interfaces you define in your code.

For example, assuming you have the following code:

{{< highlight go >}}
type Writer interface {
  Write() error
}
{{< / highlight >}}

And you have a piece of code like:

{{< highlight go >}}
func WriteSomething(w Writer) bool {
  if err := w.Write(); err != nil {
    return false
  }
  return true
}
{{< / highlight >}}

Adding the following directive:

{{< highlight go >}}
//go:generate counterfeiter -o fake/writer.gen.go -fake-name Writer . Writer
{{< / highlight >}}

`counterfeiter` will generate a new type `fake.Writer` that will allow you to use those instances as *dummies*, as well as giving you full control to *fake*, *stub*, *mock* and *spy* that said instance.

Using this simple method in this interface, the generated methods include:

* `Write() error`: to satisfy the interface,
* `WriteCallCount() int`: to determine how many times the method was called,
* `WriteCalls(func() error)`: to define a method that returns the same as the original interface, equal to `w.WriteStub` but goroutine-safe,
* `WriteReturns(error)`: to return the value all the times `Write` is called, and
* `WriteReturnsOnCall(int, error)`: to return specific values for specific calls at specific times.

With those autogenerated methods you have more than enough to [properly test your external dependencies](https://gitlab.com/MarioCarrion/blog-examples/tree/master/2019/06/24) and how they affect your internal flow.

`counterfeiter` is a really powerful tool. Highly recommended.

---

![The more you know](https://media.giphy.com/media/83QtfwKWdmSEo/giphy.gif "The more you know")
