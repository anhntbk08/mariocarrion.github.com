---
date: 2006-11-26T00:49:59Z
title: Cecil, 2
url: /2006/11/26/cecil-2.html
---

<p>If you are trying to get <em>Mono.Cecil.TypeDefinition</em> from a <em>Mono.Cecil.TypeReference</em> (like I was) you can start by trying the following code, just an idea:</p>
<p><code lang="csharp">DefaultAssemblyResolver resolver = new DefaultAssemblyResolver ();<br />
AssemblyNameReference assem = new AssemblyNameReference ();<br />
assem.Name = "mscorlib";<br />
assem.Version = new Version (2, 0); //Try 1.0 also<br />
AssemblyDefinition assemDef = resolver.Resolve (assem);<br />
foreach (TypeReference typeReference in _library.MainModule.TypeReferences) {<br />
	TypeDefinition definition = assemDef.MainModule.Types [typeReference.FullName];<br />
	Console.WriteLine (definition.FullName);<br />
}</code></p>
<p>Don't forget to add <em>using Mono.Cecil</em>. Above code solve my problems to get those DataType-like structures, such as System.Int32, System.Int16 and so on, which aren't loaded when you are doing <a href="http://en.wikipedia.org/wiki/Reverse_engineering">reverse engineering</a>.</p>
