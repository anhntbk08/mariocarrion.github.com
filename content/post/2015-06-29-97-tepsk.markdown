---
date: 2015-06-29T00:00:00Z
description: Finished reading my 10th book of the year, what do I think about it?
image: ruby.png
image_facebook: ruby-facebook.png
title: 'Finished Reading: 97 Things Every Programmer Should Know'
url: /2015/06/29/97-tepsk.html
---

It didn't take too me long to finish reading **97 Things Every Programmer Should Know**, probably it took me about 2 weeks to finish reading it, it was a quick reading considering commuting takes me about 30-40 minutes every day, twice a day.

This book has 97 tips from *experts* in the industry, and to be honest with you... from all the people in this book, I didn't recognize one, not a single one. Should I be worried?

I must say that *97 Things Every Programmer Should Know* includes some cool tips, some of them pretty obvious if you have been doing this for a while, but still a great reading if you are starting and don't have a lot of experience.

I would be lying if I don't say I didn't like some of the tips, but the truth is I did, as a matter of fact the following were my favorite:

* **Hard work does not pay off** by [Olve Maudal](http://olvemaudal.com/) which basically means: make all your *work time* useful, staying late to finish your job is not what you're supposed to be doing, be focused and stop fooling around.
* **Testing is the Engineering Rigor of Software Development** by [Neal Ford](http://nealford.com/). I personally like this one a lot, because sadly is not one of the things you learn at school... or maybe you do nowadays. The idea is simple: test **always**. Testing is often consider a *last thing to do* because silly people know nothing about Software Engineering.
* **Write code as if you had to support for the rest of your life** by [Yuriy Zubarev](http://www.yuriy-zubarev.com/). Pretty straightforward and honestly really obvious, when writing code, write it like you mean it. Think: *what if I have to revisit this code in a few months... or years?*. Simple thing that a lot of developers don't care.

I liked those the most because is stuff that is extremely obvious but a lot of "*engineers*" don't think of; basic stuff, because not everything is about the programming language or the algorithms or the frameworks you use for creating software, but it's more about the human aspect of writing software, because in the end people writing software are *still* humans.

Next in the queue is **Practical Object-Oriented Design in Ruby: An Agile Primer**, I'm really looking forward to reading this one because I personally like a lot about Software Design and I'm pretty sure I'll learn something useful, not only for my Ruby projects, but in general for all the software I write in the future.
